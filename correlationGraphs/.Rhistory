complexity = complexity + sum(countVector);
}
complexity
factors <- c("if","else","case","default","return","for","while","do-while","break","continue","&&","||", "\\?", ":","catch", "finally", "throw", "throws");
complexity = 1;
for(line in dataframe){
line <- sapply(line, tolower);
line;
countVector <- str_count(line,factors);
complexity = complexity + sum(countVector);
}
line
##Process each file
computeFile <- function(fileName){
dataframe <- readLines(fileName)
##remove empty lines
columns <- which(dataframe[]=="")
dataframe<-dataframe[-columns]
##TODO remove comments
##Count complexity factors
factors <- c("if","else","case","default","return","for","while","do-while","break","continue","&&","||", "\\?", ":","catch", "finally", "throw", "throws");
complexity = 1;
for(line in dataframe){
line <- sapply(line, tolower);
line;
countVector <- str_count(line,factors);
complexity = complexity + sum(countVector);
}
}
#Load scripts
baseDir<- "C://Users//chris//OneDrive//Documentos//GitHub//";
dir<- paste(baseDir, "dataWrangling//dataframeUtil.R",sep="");
source(dir);
dirData <-paste(baseDir, "photinus-analytics//codeSnippetAnalysis//data//",sep="");
fileList <- list.files(dirData, full.names = TRUE)
dataframe <- readLines(fileList[1])
columns <- which(dataframe[]=="")
dataframe<-dataframe[-columns]
for(fileName in fileList){
computeFile(fileName);
}
complexity
print(line);
##Remove empty columns
removeEmptyElements <- function(vector){
columns <- which(vector[]=="");
vector <- vector[-columns];
}
dataframe
factors <- c("if","else","case","default","return","for","while","do-while","break","continue","&&","||", "\\?", ":","catch", "finally", "throw", "throws");
str_count(dataframe[1],factors)
test <-c("\\||")
str_count(line,test)
line
line
test <-c("\\|")
line <- dataframe[1]
line
line <- dataframe[2]
line
str_count(line,test)
dataframe <- readLines(fileList[1])
dataframe
dataframe <- readLines(fileList[1])
dataframe
##Process each file
computeFile <- function(fileName){
dataframe <- readLines(fileName)
##remove empty lines
dataframe <- removeEmptyElements(dataframe);
##TODO remove comments
##TODO remove tabs
##Count complexity factors
factors <- c("if","else","case","default","return","for","while","do-while","break","continue","&&","\\|", "\\?", ":","catch", "finally", "throw", "throws");
complexity = 1;
for(line in dataframe){
line <- sapply(line, tolower);
print(line);
countVector <- str_count(line,factors);
complexity = complexity + sum(countVector);
}
#Load scripts
baseDir<- "C://Users//chris//OneDrive//Documentos//GitHub//";
dir<- paste(baseDir, "dataWrangling//dataframeUtil.R",sep="");
source(dir);
dirData <-paste(baseDir, "photinus-analytics//codeSnippetAnalysis//data//",sep="");
fileList <- list.files(dirData, full.names = TRUE)
dataframe <- readLines(fileList[1])
for(fileName in fileList){
computeFile(fileName);
}
;
;
#Load scripts
baseDir<- "C://Users//chris//OneDrive//Documentos//GitHub//";
dir<- paste(baseDir, "dataWrangling//dataframeUtil.R",sep="");
source(dir);
dirData <-paste(baseDir, "photinus-analytics//codeSnippetAnalysis//data//",sep="");
fileList <- list.files(dirData, full.names = TRUE);
dataframe <- readLines(fileList[1]);
for(fileName in fileList){
computeFile(fileName);
}
complexity
line <- dataframe[1]
line
line
line <- dataframe[2]
line
factors <- c("if","else","case","default","return","for","while","do-while","break","continue","&&","\\|", "\\?", ":","catch", "finally", "throw", "throws");
str_count(line,factors)
str_count(dataframe[3],factors)
str_count(dataframe[4],factors)
str_count(dataframe[4],factors)
str_count(dataframe[5],factors)
line <- dataframe[4]
line
str_count(dataframe[6],factors)
str_count(dataframe[7],factors)
factors <- c("if","else","case","default","return","for","while","do-while","break","continue","&&","\\|\\|", "\\?", ":","catch", "finally", "throw", "throws");
str_count(dataframe[7],factors)
dataframe[7]
str_count(dataframe[7],factors)
print(line)
##Process each file
computeFile <- function(fileName){
dataframe <- readLines(fileName)
##remove empty lines
dataframe <- removeEmptyElements(dataframe);
##TODO remove comments
##TODO remove tabs
##Count complexity factors
factors <- c("if","else","case","default","return","for","while","do-while","break","continue","&&","\\|\\|", "\\?", ":","catch", "finally", "throw", "throws");
complexity = 1;
for(line in dataframe){
line <- sapply(line, tolower);
print(line);
countVector <- str_count(line,factors);
complexity = complexity + sum(countVector);
}
}
fileList <- list.files(dirData, full.names = TRUE);
dataframe <- readLines(fileList[1]);
for(fileName in fileList){
computeFile(fileName);
}
complexity
##Process each file
computeFile <- function(fileName){
dataframe <- readLines(fileName)
##remove empty lines
dataframe <- removeEmptyElements(dataframe);
##TODO remove comments
##TODO remove tabs
##Count complexity factors
factors <- c("if","else","case","default","return","for","while","do-while","break","continue","&&","\\|\\|", "\\?", ":","catch", "finally", "throw", "throws");
complexity = 1;
for(line in dataframe){
line <- sapply(line, tolower);
print(line);
countVector <- str_count(line,factors);
print(sum(countVector));
complexity = complexity + sum(countVector);
}
}
fileList <- list.files(dirData, full.names = TRUE);
dataframe <- readLines(fileList[1]);
for(fileName in fileList){
computeFile(fileName);
}
?print
computeFile <- function(fileName){
dataframe <- readLines(fileName)
##remove empty lines
dataframe <- removeEmptyElements(dataframe);
##TODO remove comments
##TODO remove tabs
##Count complexity factors
factors <- c("if","else","case","default","return","for","while","do-while","break","continue","&&","\\|\\|", "\\?", ":","catch", "finally", "throw", "throws");
complexity = 1;
for(line in dataframe){
line <- sapply(line, tolower);
print(line);
countVector <- str_count(line,factors);
print(sum(countVector));
complexity = complexity + sum(countVector);
}
print(complexity);
}
fileList <- list.files(dirData, full.names = TRUE);
dataframe <- readLines(fileList[1]);
for(fileName in fileList){
computeFile(fileName);
}
complexity
computeFile <- function(fileName){
dataframe <- readLines(fileName)
##remove empty lines
dataframe <- removeEmptyElements(dataframe);
##TODO remove comments
##TODO remove tabs
##Count complexity factors
factors <- c("if","else","case","default","return","for","while","do-while","break","continue","&&","\\|\\|", "\\?", ":","catch", "finally", "throw", "throws");
complexity = 1;
for(line in dataframe){
line <- sapply(line, tolower);
print(line);
countVector <- str_count(line,factors);
print(sum(countVector));
complexity = complexity + sum(countVector);
}
return (complexity);
}
##Process each file
computeFile <- function(fileName){
dataframe <- readLines(fileName)
##remove empty lines
dataframe <- removeEmptyElements(dataframe);
##TODO remove comments
##TODO remove tabs
##Count complexity factors
factors <- c("if","else","case","default","return","for","while","do-while","break","continue","&&","\\|\\|", "\\?", ":","catch", "finally", "throw", "throws");
complexity = 1;
for(line in dataframe){
line <- sapply(line, tolower);
print(line);
countVector <- str_count(line,factors);
print(sum(countVector));
complexity = complexity + sum(countVector);
}
return (complexity);
}
#Load scripts
baseDir<- "C://Users//chris//OneDrive//Documentos//GitHub//";
dir<- paste(baseDir, "dataWrangling//dataframeUtil.R",sep="");
source(dir);
dirData <-paste(baseDir, "photinus-analytics//codeSnippetAnalysis//data//",sep="");
fileList <- list.files(dirData, full.names = TRUE);
dataframe <- readLines(fileList[1]);
for(fileName in fileList){
print("complexity:"+computeFile(fileName));
}
dir<- paste(baseDir, "dataWrangling//dataframeUtil.R",sep="");
source(dir);
dirData <-paste(baseDir, "photinus-analytics//codeSnippetAnalysis//data//",sep="");
fileList <- list.files(dirData, full.names = TRUE);
dataframe <- readLines(fileList[1]);
for(fileName in fileList){
print("complexity:",computeFile(fileName));
}
baseDir<- "C://Users//chris//OneDrive//Documentos//GitHub//";
dir<- paste(baseDir, "dataWrangling//dataframeUtil.R",sep="");
source(dir);
dirData <-paste(baseDir, "photinus-analytics//codeSnippetAnalysis//data//",sep="");
fileList <- list.files(dirData, full.names = TRUE);
dataframe <- readLines(fileList[1]);
for(fileName in fileList){
cat("complexity:",computeFile(fileName));
}
?qnorm
qnorm(0.95,0,1,lower.tail = FALSE, log.p = FALSE)
qnorm(95,0,1,lower.tail = FALSE, log.p = FALSE)
qnorm(0.95,0,1,lower.tail = TRUE, log.p = FALSE)
qnorm(0.975,0,1,lower.tail = TRUE, log.p = FALSE)
?dbeta
theta=seq(from=0,to=1,by=.01)
plot(theta,dbeta(theta,4,0),type="l")
plot(theta,dbeta(theta,4,1),type="l")
plot(theta,dbeta(theta,1,1),type="l")
theta=seq(from=0,to=1,by=.01)
plot(theta,dbeta(theta,4,2),type="l")
plot(theta,dbeta(theta,0,4),type="l")
?dbeta
plot(theta,dbeta(theta,1,4),type="l")
plot(theta,dbeta(theta,1,5),type="l")
1-pbeta(.25,41,11)
1-pbeta(.5,41,11)
1-pbeta(.8,41,11)
1-pbeta(.5,1,5)
pbeta(.5,1,5)
plot(theta,dbeta(theta,41,11),type="l")
1-pbeta(.5,41,11)
1-pbeta(.8,41,11)
?pbeta
1-pbeta(.8,41,11,lower.tail = TRUE)
1-pbeta(.8,1,5,lower.tail = TRUE)
theta=seq(from=0,to=1,by=.01)
plot(theta,dbeta(theta,1,5),type="l")
pbeta(.5,1,5)
pbeta(.5,1,5)
1- pbeta(.95,8,16)
1- pbeta(0.95,16,8)
qbeta(0.025,8,16)
qbeta(0.975,8,16)
1-pbeta(.8,41,11)
1-pbeta(.5,41,11)
1-pbeta(.25,41,11)
qbeta(.025,41,11)
qbeta(.975,41,11)
qbeta(0.05,8,16)
qbeta(0.95,8,16)
qbeta(0.90,8,16)
?pbeta
pgamma
pgamma
?pgamma
theta=seq(from=0,to=1,by=.01)
plot(theta,gamma(theta,67,6),type="l")
plot(theta,dgamma(theta,67,6),type="l")
plot(theta,dgamma(theta,8,1),type=".")
plot(theta,dgamma(theta,67,6),type="l")
plot(theta,dgamma(theta,8,1),type="-")
plot(theta,dgamma(theta,8,1),type="-")
lines(theta,dgamma(theta,67,6),lty=2)
lines(theta,dgamma(theta,8,1),lty=3
plot(theta,dbeta(theta,32,20),type="l")
lines(theta,dbeta(theta,8,4),lty=2)
lines(theta,44*dbinom(24,size=40,p=theta),lty=3)
plot(theta,dbeta(theta,32,20),type="l")
lines(theta,dbeta(theta,8,4),lty=2)
source('C:/Users/chris/OneDrive/Documentos/GitHub/bayesianStudies/CredibleIntervals.R', echo=TRUE)
plot(theta,dgamma(theta,8,1),type="l")
lines(theta,dgamma(theta,8,1),lty=3)
lines(theta,dgamma(theta,67,6),lty=2)
gam=seq(from=0,to=20,by=1)
plot(theta,dgamma(gam,8,1),type="l")
lines(theta,dgamma(gam,8,1),lty=3)
lines(theta,dgamma(gam,67,6),lty=2)
plot(theta,dgamma(gam,8,1),type="l")
gam=seq(from=0,to=20,by=1)
plot(theta,dgamma(gam,8,1),type="l")
plot(gam,dgamma(gam,8,1),type="l")
lines(gam,dgamma(gam,8,1),lty=3)
lines(gam,dgamma(gam,67,6),lty=2)
plot(gam,dgamma(gam,67,6),type="l")
lines(gam,dgamma(gam,8,1),lty=3)
lines(gam,dgamma(gam,67,6),lty=2)
plot(gam,dgamma(gam,67,6),type="l")
lines(gam,dgamma(gam,8,1),lty=2)
lines(gam,dgamma(gam,67,6),lty=3)
plot(gam,dgamma(gam,67,6),type="l")
lines(gam,dgamma(gam,8,1),lty=2)
qgamma(0.05,67,6)
qgamma(0.95,67,6)
install.packages('randomForest')
loadAnswers<- function(fileName){
setwd("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//correlationGraphs//");
data_all <- read.csv(fileName,header = TRUE,sep=",");
dataf = data.frame(data_all);
return(dataf);
}
dataf<- loadAnswers("answerList_photinus_data.csv");
#Check if total answers is 2580
length(dataf$TP)
#Select TP, TN, FP, FN for the item
selectOutcomes <- function(df,lineNumbers){
dataf_confidence <- df [(lineNumbers) ,];
TP <- sum(dataf_confidence$TP);
TN <- sum(dataf_confidence$TN);
FP <- sum(dataf_confidence$FP);
FN <- sum(dataf_confidence$FN);
outcome.df <- data.frame(TP,TN,FP,FN);
return (outcome.df);
}
#Compute accuracy for each level of difficulty and confidence
computeAccuracy<- function(df){
return((df$TP+df$TN)/(df$TP+df$TN+df$FP+df$FN));
}
#Compute precision for each level of difficulty and confidence
computePrecision<- function(df){
result<-(df$TP)/(df$TP+df$FP);
if(is.nan(sum(result))){
index<- is.nan(result);
result[index]<-0;
}
return(result);
}
#Compute precision for each level of difficulty and confidence
computeRecall<- function(df){
return((df$TP)/(df$TP+df$FN));
}
## Computes a table with statistics for each difficulty or confidence level
computeStats<- function(df,selection, filterName){
dataframe <- data.frame(Confidence=double(),Accuracy=double(), Precision=double(), Recall=double(), Answers=double() );
for(i in 1:5){
outcomesDF<- selectOutcomes(df,selection==i);
dataframe[i,1]<-i;
dataframe[i,2]<-computeAccuracy(outcomesDF);
dataframe[i,3]<-computePrecision(outcomesDF);
dataframe[i,4]<-computeRecall(outcomesDF);
dataframe[i,5]<-sum(outcomesDF[1,]);
}
print(filterName);
print(dataframe);
message("Total answers:" , sum(dataframe$Answers));
return(dataframe);
}
#Plotting Answer Options
install.packages("ggplot2");
library("ggplot2");
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//correlationGraphs//multiplot.R");
## Builds plots with multiple lines
plotMultiLine <- function(stats,title){
multiplot <- ggplot(stats, aes(x=Confidence),fill="Metrics") +
geom_line(aes(y = Accuracy, colour="Accuracy")) +
geom_line(aes(y = Recall, colour = "Recall")) +
geom_line(aes(y = Precision, colour = "Precision")) +
ggtitle(title) +
ylab(label="Metrics") +
xlab("Confidence") +
scale_colour_manual("",
breaks = c("Accuracy" ,"Recall","Precision"),
values = c("Accuracy"="blue","Recall"="black","Precision"="red"))+
scale_y_continuous(limits = c(0, 1));
return(multiplot);
}
plotSingleLine <- function(stats,title){
singlePlot <- ggplot(stats, aes(x=Confidence),fill="Metrics") +
geom_line(aes(y = Accuracy, colour="Accuracy")) +
ggtitle(title) +
ylab(label="Metrics") +
xlab("Confidence") +
scale_colour_manual("",
breaks = c("Accuracy"),
values = c("Accuracy"="blue"))+
scale_y_continuous(limits = c(0, 1));
return(singlePlot);
}
dataProf <- dataf [(dataf$FailingMethod =="HIT01_8") ,];
dataProf <- dataProf [(dataProf$Worker.profession=="Undergraduate_Student"),];
dataProf <- dataProf [(dataProf$Answer.option=="YES"),];
stats1<- computeStats(dataProf,dataProf$Answer.confidence,"Only HIT01_8 - confidence");
dataProf <- dataf [(dataf$FailingMethod =="HIT02_24") ,];
dataProf <- dataProf [(dataProf$Worker.profession=="Undergraduate_Student"),];
dataProf <- dataProf [(dataProf$Answer.option=="YES"),];
stats2<- computeStats(dataProf,dataProf$Answer.confidence,"Only HIT02_24 - confidence");
dataProf <- dataf [(dataf$FailingMethod =="HIT03_6") ,];
dataProf <- dataProf [(dataProf$Worker.profession=="Undergraduate_Student"),];
dataProf <- dataProf [(dataProf$Answer.option=="YES"),];
stats3<- computeStats(dataProf,dataProf$Answer.confidence,"Only HIT03_6 - confidence");
dataProf <- dataf [(dataf$FailingMethod =="HIT04_7") ,];
dataProf <- dataProf [(dataProf$Worker.profession=="Undergraduate_Student"),];
dataProf <- dataProf [(dataProf$Answer.option=="YES"),];
stats4<- computeStats(dataProf,dataProf$Answer.confidence,"Only HIT04_7 - confidence");
dataProf <- dataf [(dataf$FailingMethod =="HIT05_35") ,];
dataProf <- dataProf [(dataProf$Worker.profession=="Undergraduate_Student"),];
dataProf <- dataProf [(dataProf$Answer.option=="YES"),];
stats5<- computeStats(dataProf,dataProf$Answer.confidence,"Only HIT05_35 - confidence");
dataProf <- dataf [(dataf$FailingMethod =="HIT06_51") ,];
dataProf <- dataProf [(dataProf$Worker.profession=="Undergraduate_Student"),];
dataProf <- dataProf [(dataProf$Answer.option=="YES"),];
stats6<- computeStats(dataProf,dataProf$Answer.confidence,"Only HIT06_51 - confidence");
dataProf <- dataf [(dataf$FailingMethod =="HIT07_33") ,];
dataProf <- dataProf [(dataProf$Worker.profession=="Undergraduate_Student"),];
dataProf <- dataProf [(dataProf$Answer.option=="YES"),];
stats7<- computeStats(dataProf,dataProf$Answer.confidence,"Only HIT07_33 - confidence");
dataProf <- dataf [(dataf$FailingMethod =="HIT08_54") ,];
dataProf <- dataProf [(dataProf$Worker.profession=="Undergraduate_Student"),];
dataProf <- dataProf [(dataProf$Answer.option=="YES"),];
stats8<- computeStats(dataProf,dataProf$Answer.confidence,"Only HIT08_54 - confidence");
p2<- plotSingleLine(stats2,"HIT02_24");
p5<- plotSingleLine(stats5,"HIT05_35");
p7<- plotSingleLine(stats7,"HIT07_33");
p1<- plotSingleLine(stats1,"HIT01_8");
p3<- plotSingleLine(stats3,"HIT03_6");
p6<- plotSingleLine(stats6,"HIT06_51");
p8<- plotSingleLine(stats8,"HIT08_54");
p4<- plotSingleLine(stats4,"HIT04_7");
multiplot(p2, p5, p7, p1,cols=4);
multiplot(p3, p6, p8, p4, cols=4);
dataProf <- dataf [(dataf$FailingMethod =="HIT01_8") ,];
dataProf <- dataProf [(dataProf$Worker.profession=="Professional_Developer"),];
dataProf <- dataProf [(dataProf$Answer.option=="YES"),];
stats1<- computeStats(dataProf,dataProf$Answer.confidence,"Only HIT01_8 - confidence");
dataProf <- dataf [(dataf$FailingMethod =="HIT02_24") ,];
dataProf <- dataProf [(dataProf$Worker.profession=="Professional_Developer"),];
dataProf <- dataProf [(dataProf$Answer.option=="YES"),];
stats2<- computeStats(dataProf,dataProf$Answer.confidence,"Only HIT02_24 - confidence");
dataProf <- dataf [(dataf$FailingMethod =="HIT03_6") ,];
dataProf <- dataProf [(dataProf$Worker.profession=="Professional_Developer"),];
dataProf <- dataProf [(dataProf$Answer.option=="YES"),];
stats3<- computeStats(dataProf,dataProf$Answer.confidence,"Only HIT03_6 - confidence");
dataProf <- dataf [(dataf$FailingMethod =="HIT04_7") ,];
dataProf <- dataProf [(dataProf$Worker.profession=="Professional_Developer"),];
dataProf <- dataProf [(dataProf$Answer.option=="YES"),];
stats4<- computeStats(dataProf,dataProf$Answer.confidence,"Only HIT04_7 - confidence");
dataProf <- dataf [(dataf$FailingMethod =="HIT05_35") ,];
dataProf <- dataProf [(dataProf$Worker.profession=="Professional_Developer"),];
dataProf <- dataProf [(dataProf$Answer.option=="YES"),];
stats5<- computeStats(dataProf,dataProf$Answer.confidence,"Only HIT05_35 - confidence");
dataProf <- dataf [(dataf$FailingMethod =="HIT06_51") ,];
dataProf <- dataProf [(dataProf$Worker.profession=="Professional_Developer"),];
dataProf <- dataProf [(dataProf$Answer.option=="YES"),];
stats6<- computeStats(dataProf,dataProf$Answer.confidence,"Only HIT06_51 - confidence");
dataProf <- dataf [(dataf$FailingMethod =="HIT07_33") ,];
dataProf <- dataProf [(dataProf$Worker.profession=="Professional_Developer"),];
dataProf <- dataProf [(dataProf$Answer.option=="YES"),];
stats7<- computeStats(dataProf,dataProf$Answer.confidence,"Only HIT07_33 - confidence");
dataProf <- dataf [(dataf$FailingMethod =="HIT08_54") ,];
dataProf <- dataProf [(dataProf$Worker.profession=="Professional_Developer"),];
dataProf <- dataProf [(dataProf$Answer.option=="YES"),];
stats8<- computeStats(dataProf,dataProf$Answer.confidence,"Only HIT08_54 - confidence");
p2<- plotSingleLine(stats2,"HIT02_24");
p5<- plotSingleLine(stats5,"HIT05_35");
p7<- plotSingleLine(stats7,"HIT07_33");
p1<- plotSingleLine(stats1,"HIT01_8");
p3<- plotSingleLine(stats3,"HIT03_6");
p6<- plotSingleLine(stats6,"HIT06_51");
p8<- plotSingleLine(stats8,"HIT08_54");
p4<- plotSingleLine(stats4,"HIT04_7");
multiplot(p2, p5, p7, p1,cols=4);
multiplot(p3, p6, p8, p4, cols=4);
