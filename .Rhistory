}
complexity
computeFile <- function(fileName){
dataframe <- readLines(fileName)
##remove empty lines
dataframe <- removeEmptyElements(dataframe);
##TODO remove comments
##TODO remove tabs
##Count complexity factors
factors <- c("if","else","case","default","return","for","while","do-while","break","continue","&&","\\|\\|", "\\?", ":","catch", "finally", "throw", "throws");
complexity = 1;
for(line in dataframe){
line <- sapply(line, tolower);
print(line);
countVector <- str_count(line,factors);
print(sum(countVector));
complexity = complexity + sum(countVector);
}
return (complexity);
}
##Process each file
computeFile <- function(fileName){
dataframe <- readLines(fileName)
##remove empty lines
dataframe <- removeEmptyElements(dataframe);
##TODO remove comments
##TODO remove tabs
##Count complexity factors
factors <- c("if","else","case","default","return","for","while","do-while","break","continue","&&","\\|\\|", "\\?", ":","catch", "finally", "throw", "throws");
complexity = 1;
for(line in dataframe){
line <- sapply(line, tolower);
print(line);
countVector <- str_count(line,factors);
print(sum(countVector));
complexity = complexity + sum(countVector);
}
return (complexity);
}
#Load scripts
baseDir<- "C://Users//chris//OneDrive//Documentos//GitHub//";
dir<- paste(baseDir, "dataWrangling//dataframeUtil.R",sep="");
source(dir);
dirData <-paste(baseDir, "photinus-analytics//codeSnippetAnalysis//data//",sep="");
fileList <- list.files(dirData, full.names = TRUE);
dataframe <- readLines(fileList[1]);
for(fileName in fileList){
print("complexity:"+computeFile(fileName));
}
dir<- paste(baseDir, "dataWrangling//dataframeUtil.R",sep="");
source(dir);
dirData <-paste(baseDir, "photinus-analytics//codeSnippetAnalysis//data//",sep="");
fileList <- list.files(dirData, full.names = TRUE);
dataframe <- readLines(fileList[1]);
for(fileName in fileList){
print("complexity:",computeFile(fileName));
}
baseDir<- "C://Users//chris//OneDrive//Documentos//GitHub//";
dir<- paste(baseDir, "dataWrangling//dataframeUtil.R",sep="");
source(dir);
dirData <-paste(baseDir, "photinus-analytics//codeSnippetAnalysis//data//",sep="");
fileList <- list.files(dirData, full.names = TRUE);
dataframe <- readLines(fileList[1]);
for(fileName in fileList){
cat("complexity:",computeFile(fileName));
}
?qnorm
qnorm(0.95,0,1,lower.tail = FALSE, log.p = FALSE)
qnorm(95,0,1,lower.tail = FALSE, log.p = FALSE)
qnorm(0.95,0,1,lower.tail = TRUE, log.p = FALSE)
qnorm(0.975,0,1,lower.tail = TRUE, log.p = FALSE)
?dbeta
theta=seq(from=0,to=1,by=.01)
plot(theta,dbeta(theta,4,0),type="l")
plot(theta,dbeta(theta,4,1),type="l")
plot(theta,dbeta(theta,1,1),type="l")
theta=seq(from=0,to=1,by=.01)
plot(theta,dbeta(theta,4,2),type="l")
plot(theta,dbeta(theta,0,4),type="l")
?dbeta
plot(theta,dbeta(theta,1,4),type="l")
plot(theta,dbeta(theta,1,5),type="l")
1-pbeta(.25,41,11)
1-pbeta(.5,41,11)
1-pbeta(.8,41,11)
1-pbeta(.5,1,5)
pbeta(.5,1,5)
plot(theta,dbeta(theta,41,11),type="l")
1-pbeta(.5,41,11)
1-pbeta(.8,41,11)
?pbeta
1-pbeta(.8,41,11,lower.tail = TRUE)
1-pbeta(.8,1,5,lower.tail = TRUE)
theta=seq(from=0,to=1,by=.01)
plot(theta,dbeta(theta,1,5),type="l")
pbeta(.5,1,5)
pbeta(.5,1,5)
1- pbeta(.95,8,16)
1- pbeta(0.95,16,8)
qbeta(0.025,8,16)
qbeta(0.975,8,16)
1-pbeta(.8,41,11)
1-pbeta(.5,41,11)
1-pbeta(.25,41,11)
qbeta(.025,41,11)
qbeta(.975,41,11)
qbeta(0.05,8,16)
qbeta(0.95,8,16)
qbeta(0.90,8,16)
?pbeta
pgamma
pgamma
?pgamma
theta=seq(from=0,to=1,by=.01)
plot(theta,gamma(theta,67,6),type="l")
plot(theta,dgamma(theta,67,6),type="l")
plot(theta,dgamma(theta,8,1),type=".")
plot(theta,dgamma(theta,67,6),type="l")
plot(theta,dgamma(theta,8,1),type="-")
plot(theta,dgamma(theta,8,1),type="-")
lines(theta,dgamma(theta,67,6),lty=2)
lines(theta,dgamma(theta,8,1),lty=3
plot(theta,dbeta(theta,32,20),type="l")
lines(theta,dbeta(theta,8,4),lty=2)
lines(theta,44*dbinom(24,size=40,p=theta),lty=3)
plot(theta,dbeta(theta,32,20),type="l")
lines(theta,dbeta(theta,8,4),lty=2)
source('C:/Users/chris/OneDrive/Documentos/GitHub/bayesianStudies/CredibleIntervals.R', echo=TRUE)
plot(theta,dgamma(theta,8,1),type="l")
lines(theta,dgamma(theta,8,1),lty=3)
lines(theta,dgamma(theta,67,6),lty=2)
gam=seq(from=0,to=20,by=1)
plot(theta,dgamma(gam,8,1),type="l")
lines(theta,dgamma(gam,8,1),lty=3)
lines(theta,dgamma(gam,67,6),lty=2)
plot(theta,dgamma(gam,8,1),type="l")
gam=seq(from=0,to=20,by=1)
plot(theta,dgamma(gam,8,1),type="l")
plot(gam,dgamma(gam,8,1),type="l")
lines(gam,dgamma(gam,8,1),lty=3)
lines(gam,dgamma(gam,67,6),lty=2)
plot(gam,dgamma(gam,67,6),type="l")
lines(gam,dgamma(gam,8,1),lty=3)
lines(gam,dgamma(gam,67,6),lty=2)
plot(gam,dgamma(gam,67,6),type="l")
lines(gam,dgamma(gam,8,1),lty=2)
lines(gam,dgamma(gam,67,6),lty=3)
plot(gam,dgamma(gam,67,6),type="l")
lines(gam,dgamma(gam,8,1),lty=2)
qgamma(0.05,67,6)
qgamma(0.95,67,6)
install.packages('randomForest')
library(dplyr);
library(ggplot2);
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//loadAnswers.R");
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//multiplot.R");
dataf =loadAnswers();
##function to count the numer of workers with profession X for each question
countItem<- function(dataf, yearsOfExperience){
subset_df <-subset(dataf,select= c(Worker.yearsOfExperience));
subset_df <- data.frame(subset_df);
itemCount<- rowSums(subset_df==yearsOfExperience);
subset_df["itemCount"] <- itemCount;
subset_df["Question.ID"] <- dataf$Question.ID;
subset_df <-subset(subset_df,select= c(Question.ID,itemCount));
question_by <- group_by(subset_df,Question.ID);
summaryTable <- summarize(question_by,sum(itemCount));
colnames(summaryTable)<-c("QuestoinID","itemCount");
return(summaryTable);
}
fontSize<-12;
yearsOfExperience<-"Professional_Developer";
dt<-countItem(dataf,profession);
fontSize<-12;
yearsOfExperience<-"Professional_Developer";
dt<-countItem(dataf,yearsOfExperience);
title<- paste("Fig.1 - Distribution of ",yearsOfExperience," workers across questions");
p1<- ggplot(dt,aes(x=itemCount))+
geom_histogram(binwidth = 0.2) +
ggtitle(title) +
theme(plot.title = element_text(size = fontSize))+
labs(y="question count", x=paste(yearsOfExperience," workers per question"));
yearsOfExperience<-"Graduate_Student";
dt<-countItem(dataf,yearsOfExperience);
title<- paste("Fig.2 - Distribution of ",yearsOfExperience," workers across questions");
p2<- ggplot(dt,aes(x=itemCount))+
geom_histogram(binwidth = 0.2) +
ggtitle(title) +
theme(plot.title = element_text(size = fontSize))+
labs(y="question count", x=paste(yearsOfExperience," workers per question"));
yearsOfExperience<-"Hobbyist";
dt<-countItem(dataf,yearsOfExperience);
title<- paste("Fig.3 - Distribution of ",yearsOfExperience," workers across questions");
p3<- ggplot(dt,aes(x=itemCount))+
geom_histogram(binwidth = 0.2) +
ggtitle(title) +
theme(plot.title = element_text(size = fontSize))+
labs(y="question count", x=paste(yearsOfExperience," workers per question"));
yearsOfExperience<-"Undergraduate_Student";
dt<-countItem(dataf,yearsOfExperience);
title<- paste("Fig.4 - Distribution of ",yearsOfExperience," workers across questions");
p4<- ggplot(dt,aes(x=itemCount))+
geom_histogram(binwidth = 0.2) +
ggtitle(title) +
theme(plot.title = element_text(size = fontSize))+
labs(y="question count", x=paste(yearsOfExperience," workers per question"));
yearsOfExperience<-"Other";
dt<-countItem(dataf,yearsOfExperience);
title<- paste("Fig.5 - Distribution of ",yearsOfExperience," workers across questions");
p5<- ggplot(dt,aes(x=itemCount))+
geom_histogram(binwidth = 0.2) +
ggtitle(title) +
theme(plot.title = element_text(size = 12))+
labs(y="question count", x=paste(yearsOfExperience," workers per question"));
multiplot(p1,p2,p3,p4,p5,cols=2)
library(dplyr);
library(ggplot2);
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//loadAnswers.R");
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//multiplot.R");
dataf =loadAnswers();
size<-length(dataf$Worker.ID);
listWorkerYoE<- function(dataf){
workerYoE_vector<- new.env();
size<-length(dataf$Worker.ID);
for(i in 2530){
}
return(workerYoE_vector)
}
listWorkerYoE<- function(dataf){
workerYoE_vector<- new.env();
size<-length(dataf$Worker.ID);
for(i in 2530){
workerYoE_vector[dataf$Worker.ID]<-dataf$Worker.yearsOfExperience;
}
return(workerYoE_vector)
}
listWorkerYoE(dataf);
listWorkerYoE<- function(dataf){
workerYoE_vector;#<- new.env();
size<-length(dataf$Worker.ID);
for(i in 2530){
workerYoE_vector[dataf$Worker.ID]<-dataf$Worker.yearsOfExperience;
}
return(workerYoE_vector)
}
listWorkerYoE<- function(dataf){
workerYoE_vector;#<- new.env();
size<-length(dataf$Worker.ID);
for(i in 2530){
workerYoE_vector[dataf$Worker.ID]<-dataf$Worker.yearsOfExperience;
}
return(workerYoE_vector)
}
listWorkerYoE(dataf);
listWorkerYoE<- function(dataf){
workerYoE_vector;#<- new.env();
size<-length(dataf$Worker.ID);
for(i in 2530){
workerYoE_vector[dataf$Worker.ID]<-dataf$Worker.yearsOfExperience;
}
return(workerYoE_vector)
}
listWorkerYoE(dataf);
listWorkerYoE<- function(dataf){
workerYoE_vector<- new.env();
size<-length(dataf$Worker.ID);
for(i in 2530){
workerYoE_vector[dataf$Worker.ID]<-dataf$Worker.yearsOfExperience;
}
return(workerYoE_vector)
listWorkerYoE(dataf);
summary(listWorkerYoE(dataf));
listWorkerYoE<- function(dataf){
workerYoE_vector<- new.env();
size<-length(dataf$Worker.ID);
for(i in 2530){
workerYoE_vector[dataf$Worker.ID]<-dataf$Worker.yearsOfExperience;
}
return(workerYoE_vector);
}
summary(listWorkerYoE(dataf));
listWorkerYoE<- function(dataf){
workerYoE_vector<- new.env();
size<-length(dataf$Worker.ID);
for(i in 2530){
workerYoE_vector[[dataf$Worker.ID]]<-dataf$Worker.yearsOfExperience;
}
return(workerYoE_vector);
}
summary(listWorkerYoE(dataf));
listWorkerYoE<- function(dataf){
workerYoE_vector<- new.env();
size<-length(dataf$Worker.ID);
for(i in 1:2529){
workerYoE_vector[dataf$Worker.ID]<-dataf$Worker.yearsOfExperience[i];
}
return(workerYoE_vector);
}
summary(listWorkerYoE(dataf));
dataf$Worker.yearsOfExperience[1]
workerYoE_vector[1]
workerYoE_vector<- new.env();
workerYoE_vector[1]
workerYoE_vector[[1]]
workerYoE_vector<-new.env();
workerYoE_vector[as.character[dataf$Worker.ID]]<-dataf$Worker.yearsOfExperience[1];
workerYoE_vector[as.character[dataf$Worker.ID[1]]]<-dataf$Worker.yearsOfExperience[1];
workerYoE_vector[dataf$Worker.ID[1]]<-dataf$Worker.yearsOfExperience[1];
workerYoE_vector<-{};
workerYoE_vector[dataf$Worker.ID[1]]<-dataf$Worker.yearsOfExperience[1];
workerYoE_vector[dataf$Worker.ID[2]]<-dataf$Worker.yearsOfExperience[2];
workerYoE_vector[dataf$Worker.ID[3]]<-dataf$Worker.yearsOfExperience[3];
listWorkerYoE<- function(dataf){
workerYoE_vector<-{};
size<-length(dataf$Worker.ID);
for(i in 1:2529){
workerYoE_vector[as.character[dataf$Worker.ID[i]]]<-dataf$Worker.yearsOfExperience[i];
}
return(workerYoE_vector);
}
summary(listWorkerYoE(dataf));
listWorkerYoE<- function(dataf){
workerYoE_vector<-{};
size<-length(dataf$Worker.ID);
for(i in 1:2529){
workerYoE_vector[dataf$Worker.ID[i]]<-dataf$Worker.yearsOfExperience[i];
}
return(workerYoE_vector);
}
summary(listWorkerYoE(dataf));
workersYoE_vec <- listWorkerYoE(dataf);
head(workersYoE_vec)
length(workersYoE_vec)
colnames(workersYoE_vec)<-c("WorkerID,"YoE");
?pgama
?pgamma
pgamma(0.9,9,1/396)
pgamma(0.1,9,1/396)
pgamma(0.1,9,1/390)
pgamma(0.9,9,1/390)
pgamma(0.95,9,1/390)
pgamma(0.5,9,1/390)
F <- function(x){ pgamma(x, shape, scale) }
shape<-9;
scale<-1/390;
F <- function(x){ pgamma(x, shape, scale); }
shape<-9;
scale<-1/390;
F(4,shape,scale);
F <- function(x,shape,scale){
pgamma(x, shape, scale);
}
shape<-9;
scale<-1/390;
F(4,shape,scale);
pgamma(,9,1/390)
scale
shape<-9;
scale<-1/390;
x<-4;
pgamma(x, shape, scale);
x<-6;
pgamma(x, shape, scale);
x<-4;
p4<- pgamma(x, shape, scale);
x<-6;
p6<- pgamma(x, shape, scale);
gap = 0.025*(p6-p4);
gap
dgamma(0.95, shape, scale);
pgamma(0.95, shape, scale);
pgamma(0.05, shape, scale);
shape<-9;
scale<-390;
pgamma(0.05, shape, scale);
shape<-9;
scale<-390;
pgamma(0.95, shape, scale);
shape<-9;
scale<-390;
1-pgamma(0.95, shape, scale);
shape<-9;
scale<-390;
1-pgamma(0.55, shape, scale);
shape<-9;
scale<-390;
1-pgamma(0.05, shape, scale);
shape<-9;
scale<-390;
1-pgamma(0.95, shape, scale);
shape<-9;
scale<-390;
1-dgamma(0.95, shape, scale);
shape<-9;
rate<-390;
scale<-1/rate;
1-dgamma(0.95, shape, rate,scale);
shape<-9;
rate<-390;
scale<-1/rate;
1-dgamma(0.95, shape, rate);#scale);
dgamma(0.95, shape, rate);#scale);
dgamma(0.95, shape, rate,lower.tail=FALSE);#scale);
dgamma(0.95, shape, rate,lower.tail=TRUE);#scale);
pgamma(0.95, shape, rate,lower.tail=TRUE);#scale);
library(distr)
A <- Exp(rate)
B <- Gammad(shape, scale)
conv <- 0.5*(A+B)
plot(conv)
plot(conv, to.draw.arg=1)
library(distr)
install(distr)
install.packages("distr")
library(distr)
A <- Exp(rate)
B <- Gammad(shape, scale)
conv <- 0.5*(A+B)
plot(conv)
plot(conv, to.draw.arg=1)
density <-pgamma(0.95, shape, rate,lower.tail=TRUE);#scale);
value = 0.025*density;
0.025*density;
round(0.025*density,2);
qgamma(0.975,shape,rate);
plot(Gammad(shape,scale))
?Gammad
y<-c(1:120)
p<-dgamma(y,shape,rate)
plot(y,p)
p<-dgamma(y,shape,scale)
plot(y,p)
plot(p,y)
plot(y,p)
plot(y,1/p)
#```{r Setup, echo=FALSE}
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//loadAnswers.R");
#Bug covering question ID's
bugCoveringID<- c(1,4,10,14,20,23,30,32,55,56,57,58,59,72,73,77,84,92,95,97,102,104,115,119,123);
dataf =loadAnswers();
##function to count the numer of workers with profession X for each question
countItem<- function(dataf, profession){
subset_df <-subset(dataf,select= c(Worker.profession)); ##extract only the column Worker.profession)
subset_df <- data.frame(subset_df);
itemCount<- rowSums(subset_df==profession); ##Row with ones when profession match, otherwise zero
subset_df["itemCount"] <- itemCount;
subset_df["Question.ID"] <- dataf$Question.ID;
## subset_df <-subset(subset_df,select= c(Question.ID,itemCount));##select only the rows with
question_by <- group_by(subset_df,Question.ID);
summaryTable <- summarize(question_by,sum(itemCount));
colnames(summaryTable)<-c("QuestoinID","itemCount");
return(summaryTable);
}
profession<-"Professional_Developer";
professionAnswerList<-countItem(dataf,profession);
otherProfessionAnswerList<-professionAnswerList;
otherProfessionAnswerList["itemCount"] <-(20 - professionAnswerList$itemCount);
profession<-"Professional_Developer";
professionAnswerList<-countItem(dataf,profession);
otherProfessionAnswerList<-professionAnswerList;
otherProfessionAnswerList["itemCount"] <-(20 - professionAnswerList$itemCount);
profession<-"Professional_Developer";
professionAnswerList<-countItem(dataf,profession);
library(dplyr);
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//loadAnswers.R");
bugCoveringID<- c(1,4,10,14,20,23,30,32,55,56,57,58,59,72,73,77,84,92,95,97,102,104,115,119,123);
dataf =loadAnswers();
##function to count the numer of workers with profession X for each question
countItem<- function(dataf, profession){
subset_df <-subset(dataf,select= c(Worker.profession)); ##extract only the column Worker.profession)
subset_df <- data.frame(subset_df);
itemCount<- rowSums(subset_df==profession); ##Row with ones when profession match, otherwise zero
subset_df["itemCount"] <- itemCount;
subset_df["Question.ID"] <- dataf$Question.ID;
## subset_df <-subset(subset_df,select= c(Question.ID,itemCount));##select only the rows with
question_by <- group_by(subset_df,Question.ID);
summaryTable <- summarize(question_by,sum(itemCount));
colnames(summaryTable)<-c("QuestoinID","itemCount");
return(summaryTable);
}
profession<-"Professional_Developer";
professionAnswerList<-countItem(dataf,profession);
otherProfessionAnswerList<-professionAnswerList;
otherProfessionAnswerList["itemCount"] <-(20 - professionAnswerList$itemCount);
otherProfessionAnswerList
subset_df <-subset(otherProfessionAnswerList,select= c(Question.ID)); ##extract only the column Worker.profession)
subset_df <-subset(otherProfessionAnswerList,select= c("Question.ID")); ##extract only the column Worker.profession)
subset_df <-subset(otherProfessionAnswerList,select= c(QuestionID)); ##extract only the column Worker.profession)
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//loadAnswers.R");
#Bug covering question ID's
bugCoveringID<- c(1,4,10,14,20,23,30,32,55,56,57,58,59,72,73,77,84,92,95,97,102,104,115,119,123);
dataf =loadAnswers();
##function to count the numer of workers with profession X for each question
countItem<- function(dataf, profession){
subset_df <-subset(dataf,select= c(Worker.profession)); ##extract only the column Worker.profession)
subset_df <- data.frame(subset_df);
itemCount<- rowSums(subset_df==profession); ##Row with ones when profession match, otherwise zero
subset_df["itemCount"] <- itemCount;
subset_df["Question.ID"] <- dataf$Question.ID;
## subset_df <-subset(subset_df,select= c(Question.ID,itemCount));##select only the rows with
question_by <- group_by(subset_df,Question.ID);
summaryTable <- summarize(question_by,sum(itemCount));
colnames(summaryTable)<-c("QuestionID","itemCount");
return(summaryTable);
}
profession<-"Professional_Developer";
professionAnswerList<-countItem(dataf,profession);
otherProfessionAnswerList<-professionAnswerList;
subset_df <-subset(otherProfessionAnswerList,select= c(QuestionID)); ##extract only the column Worker.profession)
subset_df <- data.frame(subset_df);
subset_df
subset_df<- otherProfessionAnswerList[-bugCoveringID];
