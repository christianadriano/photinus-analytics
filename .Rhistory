lines(theta,44*dbinom(24,size=40,p=theta),lty=3)
plot(theta,dbeta(theta,32,20),type="l")
lines(theta,dbeta(theta,8,4),lty=2)
source('C:/Users/chris/OneDrive/Documentos/GitHub/bayesianStudies/CredibleIntervals.R', echo=TRUE)
plot(theta,dgamma(theta,8,1),type="l")
lines(theta,dgamma(theta,8,1),lty=3)
lines(theta,dgamma(theta,67,6),lty=2)
gam=seq(from=0,to=20,by=1)
plot(theta,dgamma(gam,8,1),type="l")
lines(theta,dgamma(gam,8,1),lty=3)
lines(theta,dgamma(gam,67,6),lty=2)
plot(theta,dgamma(gam,8,1),type="l")
gam=seq(from=0,to=20,by=1)
plot(theta,dgamma(gam,8,1),type="l")
plot(gam,dgamma(gam,8,1),type="l")
lines(gam,dgamma(gam,8,1),lty=3)
lines(gam,dgamma(gam,67,6),lty=2)
plot(gam,dgamma(gam,67,6),type="l")
lines(gam,dgamma(gam,8,1),lty=3)
lines(gam,dgamma(gam,67,6),lty=2)
plot(gam,dgamma(gam,67,6),type="l")
lines(gam,dgamma(gam,8,1),lty=2)
lines(gam,dgamma(gam,67,6),lty=3)
plot(gam,dgamma(gam,67,6),type="l")
lines(gam,dgamma(gam,8,1),lty=2)
qgamma(0.05,67,6)
qgamma(0.95,67,6)
install.packages('randomForest')
library(dplyr);
library(ggplot2);
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//loadAnswers.R");
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//multiplot.R");
dataf =loadAnswers();
##function to count the numer of workers with profession X for each question
countItem<- function(dataf, yearsOfExperience){
subset_df <-subset(dataf,select= c(Worker.yearsOfExperience));
subset_df <- data.frame(subset_df);
itemCount<- rowSums(subset_df==yearsOfExperience);
subset_df["itemCount"] <- itemCount;
subset_df["Question.ID"] <- dataf$Question.ID;
subset_df <-subset(subset_df,select= c(Question.ID,itemCount));
question_by <- group_by(subset_df,Question.ID);
summaryTable <- summarize(question_by,sum(itemCount));
colnames(summaryTable)<-c("QuestoinID","itemCount");
return(summaryTable);
}
fontSize<-12;
yearsOfExperience<-"Professional_Developer";
dt<-countItem(dataf,profession);
fontSize<-12;
yearsOfExperience<-"Professional_Developer";
dt<-countItem(dataf,yearsOfExperience);
title<- paste("Fig.1 - Distribution of ",yearsOfExperience," workers across questions");
p1<- ggplot(dt,aes(x=itemCount))+
geom_histogram(binwidth = 0.2) +
ggtitle(title) +
theme(plot.title = element_text(size = fontSize))+
labs(y="question count", x=paste(yearsOfExperience," workers per question"));
yearsOfExperience<-"Graduate_Student";
dt<-countItem(dataf,yearsOfExperience);
title<- paste("Fig.2 - Distribution of ",yearsOfExperience," workers across questions");
p2<- ggplot(dt,aes(x=itemCount))+
geom_histogram(binwidth = 0.2) +
ggtitle(title) +
theme(plot.title = element_text(size = fontSize))+
labs(y="question count", x=paste(yearsOfExperience," workers per question"));
yearsOfExperience<-"Hobbyist";
dt<-countItem(dataf,yearsOfExperience);
title<- paste("Fig.3 - Distribution of ",yearsOfExperience," workers across questions");
p3<- ggplot(dt,aes(x=itemCount))+
geom_histogram(binwidth = 0.2) +
ggtitle(title) +
theme(plot.title = element_text(size = fontSize))+
labs(y="question count", x=paste(yearsOfExperience," workers per question"));
yearsOfExperience<-"Undergraduate_Student";
dt<-countItem(dataf,yearsOfExperience);
title<- paste("Fig.4 - Distribution of ",yearsOfExperience," workers across questions");
p4<- ggplot(dt,aes(x=itemCount))+
geom_histogram(binwidth = 0.2) +
ggtitle(title) +
theme(plot.title = element_text(size = fontSize))+
labs(y="question count", x=paste(yearsOfExperience," workers per question"));
yearsOfExperience<-"Other";
dt<-countItem(dataf,yearsOfExperience);
title<- paste("Fig.5 - Distribution of ",yearsOfExperience," workers across questions");
p5<- ggplot(dt,aes(x=itemCount))+
geom_histogram(binwidth = 0.2) +
ggtitle(title) +
theme(plot.title = element_text(size = 12))+
labs(y="question count", x=paste(yearsOfExperience," workers per question"));
multiplot(p1,p2,p3,p4,p5,cols=2)
library(dplyr);
library(ggplot2);
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//loadAnswers.R");
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//multiplot.R");
dataf =loadAnswers();
size<-length(dataf$Worker.ID);
listWorkerYoE<- function(dataf){
workerYoE_vector<- new.env();
size<-length(dataf$Worker.ID);
for(i in 2530){
}
return(workerYoE_vector)
}
listWorkerYoE<- function(dataf){
workerYoE_vector<- new.env();
size<-length(dataf$Worker.ID);
for(i in 2530){
workerYoE_vector[dataf$Worker.ID]<-dataf$Worker.yearsOfExperience;
}
return(workerYoE_vector)
}
listWorkerYoE(dataf);
listWorkerYoE<- function(dataf){
workerYoE_vector;#<- new.env();
size<-length(dataf$Worker.ID);
for(i in 2530){
workerYoE_vector[dataf$Worker.ID]<-dataf$Worker.yearsOfExperience;
}
return(workerYoE_vector)
}
listWorkerYoE<- function(dataf){
workerYoE_vector;#<- new.env();
size<-length(dataf$Worker.ID);
for(i in 2530){
workerYoE_vector[dataf$Worker.ID]<-dataf$Worker.yearsOfExperience;
}
return(workerYoE_vector)
}
listWorkerYoE(dataf);
listWorkerYoE<- function(dataf){
workerYoE_vector;#<- new.env();
size<-length(dataf$Worker.ID);
for(i in 2530){
workerYoE_vector[dataf$Worker.ID]<-dataf$Worker.yearsOfExperience;
}
return(workerYoE_vector)
}
listWorkerYoE(dataf);
listWorkerYoE<- function(dataf){
workerYoE_vector<- new.env();
size<-length(dataf$Worker.ID);
for(i in 2530){
workerYoE_vector[dataf$Worker.ID]<-dataf$Worker.yearsOfExperience;
}
return(workerYoE_vector)
listWorkerYoE(dataf);
summary(listWorkerYoE(dataf));
listWorkerYoE<- function(dataf){
workerYoE_vector<- new.env();
size<-length(dataf$Worker.ID);
for(i in 2530){
workerYoE_vector[dataf$Worker.ID]<-dataf$Worker.yearsOfExperience;
}
return(workerYoE_vector);
}
summary(listWorkerYoE(dataf));
listWorkerYoE<- function(dataf){
workerYoE_vector<- new.env();
size<-length(dataf$Worker.ID);
for(i in 2530){
workerYoE_vector[[dataf$Worker.ID]]<-dataf$Worker.yearsOfExperience;
}
return(workerYoE_vector);
}
summary(listWorkerYoE(dataf));
listWorkerYoE<- function(dataf){
workerYoE_vector<- new.env();
size<-length(dataf$Worker.ID);
for(i in 1:2529){
workerYoE_vector[dataf$Worker.ID]<-dataf$Worker.yearsOfExperience[i];
}
return(workerYoE_vector);
}
summary(listWorkerYoE(dataf));
dataf$Worker.yearsOfExperience[1]
workerYoE_vector[1]
workerYoE_vector<- new.env();
workerYoE_vector[1]
workerYoE_vector[[1]]
workerYoE_vector<-new.env();
workerYoE_vector[as.character[dataf$Worker.ID]]<-dataf$Worker.yearsOfExperience[1];
workerYoE_vector[as.character[dataf$Worker.ID[1]]]<-dataf$Worker.yearsOfExperience[1];
workerYoE_vector[dataf$Worker.ID[1]]<-dataf$Worker.yearsOfExperience[1];
workerYoE_vector<-{};
workerYoE_vector[dataf$Worker.ID[1]]<-dataf$Worker.yearsOfExperience[1];
workerYoE_vector[dataf$Worker.ID[2]]<-dataf$Worker.yearsOfExperience[2];
workerYoE_vector[dataf$Worker.ID[3]]<-dataf$Worker.yearsOfExperience[3];
listWorkerYoE<- function(dataf){
workerYoE_vector<-{};
size<-length(dataf$Worker.ID);
for(i in 1:2529){
workerYoE_vector[as.character[dataf$Worker.ID[i]]]<-dataf$Worker.yearsOfExperience[i];
}
return(workerYoE_vector);
}
summary(listWorkerYoE(dataf));
listWorkerYoE<- function(dataf){
workerYoE_vector<-{};
size<-length(dataf$Worker.ID);
for(i in 1:2529){
workerYoE_vector[dataf$Worker.ID[i]]<-dataf$Worker.yearsOfExperience[i];
}
return(workerYoE_vector);
}
summary(listWorkerYoE(dataf));
workersYoE_vec <- listWorkerYoE(dataf);
head(workersYoE_vec)
length(workersYoE_vec)
colnames(workersYoE_vec)<-c("WorkerID,"YoE");
?pgama
?pgamma
pgamma(0.9,9,1/396)
pgamma(0.1,9,1/396)
pgamma(0.1,9,1/390)
pgamma(0.9,9,1/390)
pgamma(0.95,9,1/390)
pgamma(0.5,9,1/390)
F <- function(x){ pgamma(x, shape, scale) }
shape<-9;
scale<-1/390;
F <- function(x){ pgamma(x, shape, scale); }
shape<-9;
scale<-1/390;
F(4,shape,scale);
F <- function(x,shape,scale){
pgamma(x, shape, scale);
}
shape<-9;
scale<-1/390;
F(4,shape,scale);
pgamma(,9,1/390)
scale
shape<-9;
scale<-1/390;
x<-4;
pgamma(x, shape, scale);
x<-6;
pgamma(x, shape, scale);
x<-4;
p4<- pgamma(x, shape, scale);
x<-6;
p6<- pgamma(x, shape, scale);
gap = 0.025*(p6-p4);
gap
dgamma(0.95, shape, scale);
pgamma(0.95, shape, scale);
pgamma(0.05, shape, scale);
shape<-9;
scale<-390;
pgamma(0.05, shape, scale);
shape<-9;
scale<-390;
pgamma(0.95, shape, scale);
shape<-9;
scale<-390;
1-pgamma(0.95, shape, scale);
shape<-9;
scale<-390;
1-pgamma(0.55, shape, scale);
shape<-9;
scale<-390;
1-pgamma(0.05, shape, scale);
shape<-9;
scale<-390;
1-pgamma(0.95, shape, scale);
shape<-9;
scale<-390;
1-dgamma(0.95, shape, scale);
shape<-9;
rate<-390;
scale<-1/rate;
1-dgamma(0.95, shape, rate,scale);
shape<-9;
rate<-390;
scale<-1/rate;
1-dgamma(0.95, shape, rate);#scale);
dgamma(0.95, shape, rate);#scale);
dgamma(0.95, shape, rate,lower.tail=FALSE);#scale);
dgamma(0.95, shape, rate,lower.tail=TRUE);#scale);
pgamma(0.95, shape, rate,lower.tail=TRUE);#scale);
library(distr)
A <- Exp(rate)
B <- Gammad(shape, scale)
conv <- 0.5*(A+B)
plot(conv)
plot(conv, to.draw.arg=1)
library(distr)
install(distr)
install.packages("distr")
library(distr)
A <- Exp(rate)
B <- Gammad(shape, scale)
conv <- 0.5*(A+B)
plot(conv)
plot(conv, to.draw.arg=1)
density <-pgamma(0.95, shape, rate,lower.tail=TRUE);#scale);
value = 0.025*density;
0.025*density;
round(0.025*density,2);
qgamma(0.975,shape,rate);
plot(Gammad(shape,scale))
?Gammad
y<-c(1:120)
p<-dgamma(y,shape,rate)
plot(y,p)
p<-dgamma(y,shape,scale)
plot(y,p)
plot(p,y)
plot(y,p)
plot(y,1/p)
non_students<- dataf[(dataf$Worker.profession %in% c("Professional_Developer","Hobbyist")),];
non_students<- non_students[(non_students$Worker.score == 100),];
dim(non_students)
dataf$Worker.score
non_students<- non_students[(non_students$Worker.score == 5),];
non_students<- dataf[(dataf$Worker.profession %in% c("Professional_Developer","Hobbyist")),];
non_students<- non_students[(non_students$Worker.score == 5),];
dim(non_students)
dataf$Worker.profession
non_students<- dataf[!(dataf$Worker.profession %in% c("Professional_Developer","Hobbyist","Other")),];
non_students<-countItem(non_students,"");
bugCoveringList<- non_students[(non_students$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- non_students[!(non_students$QuestionID %in% bugCoveringID),];
non_students<- dataf[!(dataf$Worker.profession %in% c("Professional_Developer","Hobbyist","Other")),];
non_students<-countItem(non_students,"");
bugCoveringList<- non_students[(non_students$QuestionID %in% bugCoveringID),];
bugCoveringID<- c(1,4,10,14,20,23,30,32,55,56,57,58,59,72,73,77,84,92,95,97,102,104,115,119,123);
dataf =loadAnswers();
countItem<- function(dataf, profession){
subset_df <-subset(dataf,select= c(Worker.profession)); ##extract only the column Worker.profession)
subset_df <- data.frame(subset_df);
if(length(profession)==0){
itemCount<- rowSums(subset_df==profession); ##Row with ones when profession match, otherwise zero
}
else{
itemCount<- 1; #c(1:dim(subset_df)[1]);
}
subset_df["itemCount"] <- itemCount;
subset_df["Question.ID"] <- dataf$Question.ID;
## subset_df <-subset(subset_df,select= c(Question.ID,itemCount));##select only the rows with
question_by <- group_by(subset_df,Question.ID);
summaryTable <- summarize(question_by,sum(itemCount));
colnames(summaryTable)<-c("QuestionID","itemCount");
return(summaryTable);
}
non_students<- dataf[!(dataf$Worker.profession %in% c("Professional_Developer","Hobbyist","Other")),];
non_students<-countItem(non_students,"");
bugCoveringList<- non_students[(non_students$QuestionID %in% bugCoveringID),];
library(dplyr);
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//loadAnswers.R");
#Bug covering question ID's
bugCoveringID<- c(1,4,10,14,20,23,30,32,55,56,57,58,59,72,73,77,84,92,95,97,102,104,115,119,123);
dataf =loadAnswers();
##function to count the numer of workers with profession X for each question
countItem<- function(dataf, profession){
subset_df <-subset(dataf,select= c(Worker.profession)); ##extract only the column Worker.profession)
subset_df <- data.frame(subset_df);
if(length(profession)==0){
itemCount<- rowSums(subset_df==profession); ##Row with ones when profession match, otherwise zero
}
else{
itemCount<- 1; #c(1:dim(subset_df)[1]);
}
subset_df["itemCount"] <- itemCount;
subset_df["Question.ID"] <- dataf$Question.ID;
## subset_df <-subset(subset_df,select= c(Question.ID,itemCount));##select only the rows with
question_by <- group_by(subset_df,Question.ID);
summaryTable <- summarize(question_by,sum(itemCount));
colnames(summaryTable)<-c("QuestionID","itemCount");
return(summaryTable);
}
non_students<- dataf[!(dataf$Worker.profession %in% c("Professional_Developer","Hobbyist","Other")),];
non_students<-countItem(non_students,"");
bugCoveringList<- non_students[(non_students$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- non_students[!(non_students$QuestionID %in% bugCoveringID),];
shapiro.test(bugCoveringList$itemCount); #Not Normal W = 0.88698, p-value = 0.009657
shapiro.test(not_bugCoveringList$itemCount); #Not normal W = 0.94791, p-value = 0.0004565
wilcox.test(bugCoveringList$itemCount,not_bugCoveringList$itemCount, alternative= "two.sided", paired=FALSE);
non_students<- dataf[(dataf$Worker.profession %in% c("Professional_Developer","Hobbyist","Other")),];
non_students<- non_students[(non_students$Worker.score == 5),];
non_students<-countItem(non_students,"");
bugCoveringList<- non_students[(non_students$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- non_students[!(non_students$QuestionID %in% bugCoveringID),];
shapiro.test(bugCoveringList$itemCount); #Not Normal W = 0.88698, p-value = 0.009657
shapiro.test(not_bugCoveringList$itemCount); #Not normal W = 0.94791, p-value = 0.0004565
wilcox.test(bugCoveringList$itemCount,not_bugCoveringList$itemCount, alternative= "two.sided", paired=FALSE);
stats<-wilcox.test(bugCoveringList$itemCount,not_bugCoveringList$itemCount, alternative= "two.sided", paired=FALSE);
stats
stats.conf
stat<-wilcox.test(bugCoveringList$itemCount,not_bugCoveringList$itemCount, alternative= "two.sided", paired=FALSE);
stat
stat<-wilcox.test(bugCoveringList$itemCount,not_bugCoveringList$itemCount, alternative= "two.sided", paired=FALSE, conf.int = TRUE);
stat
mean(non_students$)
mean(non_students$itemCount)
mean(bugCoveringList$itemCount)
mean(not_bugCoveringList$itemCount)
workers_100<- workers_100[(workers_100$Worker.score == 5),];
workers_100<-countItem(workers_100,"");
bugCoveringList<- workers_100[(workers_100$QuestionID %in% bugCoveringID),];
workers_100<- dataf[(dataf$Worker.score == 5),];
workers_100<-countItem(workers_100,"");
bugCoveringList<- workers_100[(workers_100$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- workers_100[!(workers_100$QuestionID %in% bugCoveringID),];
shapiro.test(bugCoveringList$itemCount); #Normal W = 0.95015, p-value = 0.2527
shapiro.test(not_bugCoveringList$itemCount); #Not normal W = 0.96348, p-value = 0.005757
wilcox.test(bugCoveringList$itemCount,not_bugCoveringList$itemCount, alternative= "two.sided", paired=FALSE, conf.int = TRUE);
mean(bugCoveringList$itemCount)
mean(not_bugCoveringList$itemCount)
dataf$Worker.profession
professionList<- dataf[!(dataf$Worker.profession %in% c("Undergraduate_Student","Graduate_Student","Hobbyist","Other")),];
professionList<-countItem(professionList,"");
bugCoveringList<- professionList[(professionList$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- professionList[!(professionList$QuestionID %in% bugCoveringID),]
shapiro.test(bugCoveringList$itemCount); #Not Normal W = 0.90395, p-value = 0.02239
shapiro.test(not_bugCoveringList$itemCount); #Not normal W = 0.94641, p-value = 0.0003637
wilcox.test(bugCoveringList$itemCount,not_bugCoveringList$itemCount, alternative= "two.sided", paired=FALSE);
professionList<- dataf[!(dataf$Worker.profession %in% c("Graduate_Student","Hobbyist","Other")),];
professionList<-countItem(professionList,"");
bugCoveringList<- professionList[(professionList$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- professionList[!(professionList$QuestionID %in% bugCoveringID),];
shapiro.test(bugCoveringList$itemCount); #Not Normal W = 0.94579, p-value = 0.2011
shapiro.test(not_bugCoveringList$itemCount); #Not normalW = 0.94811, p-value = 0.0004707
wilcox.test(bugCoveringList$itemCount,not_bugCoveringList$itemCount, alternative= "two.sided", paired=FALSE);
professionList<- dataf[!(dataf$Worker.profession %in% c("Undergraduate_Student","Graduate_Student","Hobbyist","Other")),];
professionList<-countItem(professionList,"");
bugCoveringList<- professionList[(professionList$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- professionList[!(professionList$QuestionID %in% bugCoveringID),];
shapiro.test(bugCoveringList$itemCount); #Not Normal W = 0.94579, p-value = 0.2011
professionList<- dataf[!(dataf$Worker.profession %in% c("Undergraduate_Student","Graduate_Student","Other")),];
professionList<-countItem(professionList,"");
bugCoveringList<- professionList[(professionList$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- professionList[!(professionList$QuestionID %in% bugCoveringID),];
shapiro.test(bugCoveringList$itemCount); #Not Normal W = 0.94579, p-value = 0.2011
shapiro.test(not_bugCoveringList$itemCount); #Not normalW = 0.94811, p-value = 0.0004707
wilcox.test(bugCoveringList$itemCount,not_bugCoveringList$itemCount, alternative= "two.sided", paired=FALSE);
workers_80_60<- dataf[(dataf$Worker.score %in% c(4,3)),];
workers_80_60<-countItem(workers_80_60,"");
bugCoveringList<- workers_80_60[(workers_80_60$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- workers_80_60[!(workers_80_60$QuestionID %in% bugCoveringID),];
shapiro.test(bugCoveringList$itemCount); #Not Normal W = 0.88385, p-value = 0.008305
shapiro.test(not_bugCoveringList$itemCount); #Not normal W = 0.95902, p-value = 0.002696
mean(bugCoveringList$itemCount)
mean(not_bugCoveringList$itemCount)
wilcox.test(bugCoveringList$itemCount,not_bugCoveringList$itemCount, alternative= "two.sided", paired=FALSE, conf.int = TRUE);
students<- dataf[!(dataf$Worker.profession %in% c("Professional_Developer","Hobbyist","Other")),];
students<- students[!(students$Worker.score == 3),];
students$Worker.score
students$Worker.profession
xstudents<- dataf[!(dataf$Worker.profession %in% c("Graduate_Student","Undergraduate_Student") && dataf$Worker.score==3),];
xstudents
xstudents$Worker.score
xstudents$Worker.profession
xstudents
head(xstudent)
head(xstudents)
xstudents[3,4]
xstudents[3,4Ç5]
xstudents[3,4:5]
xstudents[1:10,2:5]
xstudents[1:10,5:15]
xstudents[1:10,5:9]
xstudents[1:10,9:12]
xstudents[1:10,9:13]
xstudents[1:10,1:6]
xstudents[1:10,12:16]
xstudents[1:10,16:19]
xstudents<- dataf[!(dataf$Worker.profession %in% c("Graduate_Student","Undergraduate_Student") & dataf$Worker.score==3),];
xstudents[1:10,16:19]
xstudents<- dataf[!((dataf$Worker.profession %in% c("Graduate_Student","Undergraduate_Student")) & dataf$Worker.score==3),];
xstudents[1:10,16:19]
xstudents[1125,17:18]
xstudents[11:25,17:18]
xstudents[26:42,17:18]
xstudents[42:70,17:18]
xstudents[71:100,17:18]
xstudents[101:200,17:18]
filteredStudents<- dataf[!((dataf$Worker.profession %in% c("Graduate_Student","Undergraduate_Student")) & dataf$Worker.score==3),];
filteredStudents<-countItem(filteredStudents,"");
bugCoveringList<- filteredStudents[(filteredStudents$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- filteredStudents[!(filteredStudents$QuestionID %in% bugCoveringID),];
shapiro.test(bugCoveringList$itemCount); #Normal W = 0.95015, p-value = 0.2527
shapiro.test(not_bugCoveringList$itemCount); #Not normal W = 0.96348, p-value = 0.005757
wilcox.test(bugCoveringList$itemCount,not_bugCoveringList$itemCount, alternative= "two.sided", paired=FALSE, conf.int = TRUE);
mean(bugCoveringList$itemCount)
mean(not_bugCoveringList$itemCount)
filteredStudents
filteredStudents<- dataf[!((dataf$Worker.profession %in% c("Graduate_Student","Undergraduate_Student")) & dataf$Worker.score==3),];
filteredStudents
dim(filteredStudents)
filteredStudents<- dataf[!((dataf$Worker.profession %in% c("Graduate_Student","Undergraduate_Student")) & dataf$Worker.score==3),];
dim(filteredStudents)
non_student_100_80<- dataf[((dataf$Worker.profession %in% c("Professional_Developer","Hobbyist","Other")) & dataf$Worker.score %in% c(4,5),];
filteredStudents<-countItem(filteredStudents,"");
bugCoveringList<- filteredStudents[(filteredStudents$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- filteredStudents[!(filteredStudents$QuestionID %in% bugCoveringID),];
shapiro.test(bugCoveringList$itemCount); #Normal W = 0.92527, p-value = 0.06762
shapiro.test(not_bugCoveringList$itemCount); #Not normal W = 0.93354, p-value = 5.723e-05
mean(bugCoveringList$itemCount) #17.4
mean(not_bugCoveringList$itemCount) #17.6
wilcox.test(bugCoveringList$itemCount,not_bugCoveringList$itemCount, alternative= "two.sided", paired=FALSE, conf.int = TRUE);
non_student_100_80<- dataf[((dataf$Worker.profession %in% c("Professional_Developer","Hobbyist","Other")) & dataf$Worker.score %in% c(4,5)),];
dim(non_student_100_80)
non_student_100_80<-countItem(non_student_100_80,"");
bugCoveringList<- non_student_100_80[(non_student_100_80$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- non_student_100_80[!(non_student_100_80$QuestionID %in% bugCoveringID),];
shapiro.test(bugCoveringList$itemCount); #Normal W = 0.92527, p-value = 0.06762
shapiro.test(not_bugCoveringList$itemCount); #Not normal W = 0.93354, p-value = 5.723e-05
mean(bugCoveringList$itemCount) #17.4
mean(not_bugCoveringList$itemCount) #17.6
wilcox.test(bugCoveringList$itemCount,not_bugCoveringList$itemCount, alternative= "two.sided", paired=FALSE, conf.int = TRUE);
