print(x <- 2+3)
countCorrectAnswerByAge<-function(data){
subsetTPTN_df = subset(data,select= c(Worker.age, TP, TN));
CorrectAnswers = subsetTPTN_df$TP + subsetTPTN_df$TN;
subsetTPTN_df = data.frame(subsetTPTN_df);
subsetTPTN_df["CorrectAnswers"]<-CorrectAnswers;
by_questions = group_by(subsetTPTN_df,Worker.age) ;
summaryTable = summarize(by_questions,sum(CorrectAnswers));
colnames(summaryTable) = c("Worker.age","CorrectAnswers");
return(summaryTable);
}
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//loadAnswers.R");
dataf <- loadAnswers();
summaryTable <- countCorrectAnswerByAge(data = dataf);
library(dplyr);
summaryTable <- countCorrectAnswerByAge(data = dataf);
view(summaryTable)
View(summaryTable)
sum(summaryTable$CorrectAnswers)
wilcox.test(summaryTable$Worker.age,summaryTable$CorrectAnswers,"two.sided");
cor(summaryTable$Worker.age,summaryTable$CorrectAnswers,use="pairwise");
output<- cor(summaryTable$Worker.age,summaryTable$CorrectAnswers,use="pairwise");
output
print(output)
summary(output)
output<- rcorr(summaryTable$Worker.age,summaryTable$CorrectAnswers,method="kendall",use="pairwise");
output<- cor.test(summaryTable$Worker.age,summaryTable$CorrectAnswers,method="kendall",use="pairwise");
output$statistic
output$p.value
output$estimate
View(summaryTable)
shapiro.test(summaryTable$Worker.age);
qqnorm(summaryTable$Worker.age)
qqplot()
qqplot(summaryTable$Worker.age)
qqline();
qqnorm(summaryTable$Worker.age)
qqline();
qqnorm(summaryTable$Worker.age) + qqline();
qqnorm(y=summaryTable$Worker.age) + qqline();
qqplot(summaryTable$Worker.age)
qqline(summaryTable$Worker.age);
qqnorm(y=summaryTable$Worker.age) + qqline();
qqline(summaryTable$Worker.age);
shapiro.test(summaryTable$CorrectAnswers);
shapiro.test(summaryTable$CorrectAnswers);
#W = 0.89149, p-value = 0.0006019 NOT NORMAL
qqnorm(y=summaryTable$CorrectAnswers);
qqline(summaryTable$CorrectAnswers);
output<- cor.test(summaryTable$Worker.age,summaryTable$CorrectAnswers,method="kendall",use="pairwise");
output$p.value
output$estimate
countCorrectAnswerByYoE<-function(data){
subsetTPTN_df = subset(data,select= c(Worker.yearsOfExperience, TP, TN));
CorrectAnswers = subsetTPTN_df$TP + subsetTPTN_df$TN;
subsetTPTN_df = data.frame(subsetTPTN_df);
subsetTPTN_df["CorrectAnswers"]<-CorrectAnswers;
by_questions = group_by(subsetTPTN_df,Worker.yearsOfExperience) ;
summaryTable = summarize(by_questions,sum(CorrectAnswers));
colnames(summaryTable) = c("Worker.yearsOfExperience","CorrectAnswers");
return(summaryTable);
summaryTable <- countCorrectAnswerByYoE(data = dataf);
countCorrectAnswerByYoE<-function(data){
subsetTPTN_df = subset(data,select= c(Worker.yearsOfExperience, TP, TN));
CorrectAnswers = subsetTPTN_df$TP + subsetTPTN_df$TN;
subsetTPTN_df = data.frame(subsetTPTN_df);
subsetTPTN_df["CorrectAnswers"]<-CorrectAnswers;
by_questions = group_by(subsetTPTN_df,Worker.yearsOfExperience) ;
summaryTable = summarize(by_questions,sum(CorrectAnswers));
colnames(summaryTable) = c("Worker.yearsOfExperience","CorrectAnswers");
return(summaryTable);
}
summaryTable <- countCorrectAnswerByYoE(data = dataf);
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//loadAnswers.R");
dataf <- loadAnswers();
summaryTable <- countCorrectAnswerByYoE(data = dataf);
shapiro.test(summaryTable$Worker.yearsOfExperience);
qqnorm(y=summaryTable$Worker.yearsOfExperience);
qqline(summaryTable$Worker.yearsOfExperience);
output<- cor.test(summaryTable$Worker.yearsOfExperience,summaryTable$CorrectAnswers,method="kendall",use="pairwise");
output$p.value
output$estimate
setwd("C://firefly//AnswerAnalysis//")
sample <- read.csv("answerConfidence.csv",  header=T)
summary(sample)
plot(sample$confidence, sample$difficulty)
cor.test(sample$confidence, sample$difficulty, method="kendall")
result$statistic
result$p.value
setwd("C://firefly//AnswerAnalysis//")
hist(sample$confidence, sample$difficulty)
hist(sample$confidence, sample$difficulty)
hist(sample$confidence);# sample$difficulty)
hist(sample$difficulty)
CrossTable(sample$confidence, sample$difficulty, fisher=FALSE, chisq=TRUE,
expected=TRUE, sresid=TRUE,format="SPSS")
install.packages("gmodels")
library(gmodels)
CrossTable(sample$confidence, sample$difficulty, fisher=FALSE, chisq=TRUE,
expected=TRUE, sresid=TRUE,format="SPSS")
countCorrectAnswerByConfidence<-function(data){
subsetTPTN_df = subset(data,select= c(Answer.confidence, TP, TN));
CorrectAnswers = subsetTPTN_df$TP + subsetTPTN_df$TN;
subsetTPTN_df = data.frame(subsetTPTN_df);
subsetTPTN_df["CorrectAnswers"]<-CorrectAnswers;
by_questions = group_by(subsetTPTN_df,Answer.confidence) ;
summaryTable = summarize(by_questions,sum(CorrectAnswers));
colnames(summaryTable) = c("Answer.confidence","CorrectAnswers");
return(summaryTable);
}
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//loadAnswers.R");
dataf <- loadAnswers();
summaryTable <- countCorrectAnswerByConfidence(data = dataf);
shapiro.test(summaryTable$Answer.confidence);
qqnorm(y=summaryTable$Answer.confidence);
qqline(summaryTable$Answer.confidence);
output<- cor.test(summaryTable$Answer.confidence,summaryTable$CorrectAnswers,method="kendall",use="pairwise");
output$p.value
output$estimate
countCorrectAnswerByDifficulty<-function(data){
subsetTPTN_df = subset(data,select= c(Answer.difficulty, TP, TN));
CorrectAnswers = subsetTPTN_df$TP + subsetTPTN_df$TN;
subsetTPTN_df = data.frame(subsetTPTN_df);
subsetTPTN_df["CorrectAnswers"]<-CorrectAnswers;
by_questions = group_by(subsetTPTN_df,Answer.difficulty) ;
summaryTable = summarize(by_questions,sum(CorrectAnswers));
colnames(summaryTable) = c("Answer.difficulty","CorrectAnswers");
return(summaryTable);
}
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//loadAnswers.R");
dataf <- loadAnswers();
summaryTable <- countCorrectAnswerByDifficulty(data = dataf);
shapiro.test(summaryTable$Answer.difficulty);
qqnorm(y=summaryTable$Answer.difficulty);
qqline(summaryTable$Answer.difficulty);
output<- cor.test(summaryTable$Answer.difficulty,summaryTable$CorrectAnswers,method="kendall",use="pairwise");
output$p.value
output$estimate
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//loadAnswers.R");
dataf <- loadAnswers();
dataf$Answer.correct<- dataf$TP * dataf$TN;
View(dataF)
View(dataf)
dataf$Answer.correct<- dataf$TP || dataf$TN;
View(dataf)
dataf$Answer.correct<- (dataf$TP==1) || (dataf$TN==1);
View(dataf)
a=1
b=0
a==1
a==1 || b==1
dataf$Answer.correct<- ((dataf$TP==1) || (dataf$TN==1));
View(dataf)
dataf[5,"TN"]==1
(dataf[5,"TN"]==1) || (dataf[5,"TP"]==1)
list<-dataf$TP==1
list
list<-dataf$TN==1
list
listTN<-dataf$TN==1
listTP<-dataf$TP==1
listF<- listTN || listTP
listF
listF<- listTN * listTP
listF
listF<- listTN + listTP
listF
listF<- (dataf$TP==1) + (dataf$TN==1)
listF
head(listF)
head(listF[1:10,])
listF[1:10,]
listF[1:10]
dataf[dataf$TP==1,]
sum(dataf$TP)
sum(dataf$FN)
sum(dataf$TN)
dataf[dataf$TP==1,]
dataf[dataf$TP==1,]
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//loadAnswers.R");
dataf <- loadAnswers();
#Compute column to label answers as correct/wrong
dataf$Answer.correct<- ((dataf$TP==1) || (dataf$TN==1));
View(dataf)
dataf$Answer.correct<- ((dataf$TP==1) + (dataf$TN==1));
View(dataf)
sum(dataf$TP)
sum(dataf$TP) + sum(dataf$FN)
sum(dataf$TP) + sum(dataf$FN) - 2557
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//loadAnswers.R");
dataf <- loadAnswers();
#Compute column to label answers as correct/wrong
dataf$Answer.correct<- ((dataf$TP==1) + (dataf$TN==1));
featuresdf<- data.frame(dataf$Answer.duration,dataf$Answer.confidence,dataf$Answer.difficulty,stri_length(dataf$Answer.explanation),
dataf$Worker.age,dataf$Worker.yearsOfExperience,dataf$Worker.score,dataf$Worker.profession,
dataf$Code.LOC,dataf$Code.complexity);
colnames(featuresdf) <- c("Answer.duration","Answer.confidence","Answer.difficulty","Answer.explanationSize",
"Worker.age","Worker.yearsOfExperience","Worker.score","Worker.profession",
"Code.LOC","Code.complexity");
#Add column with correct answer label
dataf$Answer.correct<- ((dataf$TP==1) + (dataf$TN==1));
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//loadAnswers.R");
dataf <- loadAnswers();
dataf$Answer.correct<- ((dataf$TP==1) + (dataf$TN==1));
featuresdf<- data.frame(dataf$Answer.duration,dataf$Answer.confidence,dataf$Answer.difficulty,stri_length(dataf$Answer.explanation),
dataf$Worker.age,dataf$Worker.yearsOfExperience,dataf$Worker.score,dataf$Worker.profession,
dataf$Code.LOC,dataf$Code.complexity);
install.packages("stringi")
library(stringi)
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//loadAnswers.R");
dataf <- loadAnswers();
#Compute column to label answers as correct/wrong
dataf$Answer.correct<- ((dataf$TP==1) + (dataf$TN==1));
featuresdf<- data.frame(dataf$Answer.duration,dataf$Answer.confidence,dataf$Answer.difficulty,stri_length(dataf$Answer.explanation),
dataf$Worker.age,dataf$Worker.yearsOfExperience,dataf$Worker.score,dataf$Worker.profession,
dataf$Code.LOC,dataf$Code.complexity);
colnames(featuresdf) <- c("Answer.duration","Answer.confidence","Answer.difficulty","Answer.explanationSize",
"Worker.age","Worker.yearsOfExperience","Worker.score","Worker.profession",
"Code.LOC","Code.complexity");
set.seed(8850);
g<- runif((nrow(featuresdf))); #generates a random distribution
featuresdf <- featuresdf[order(g),];
totalData = length(featuresdf$Question.ID);
trainingSize = trunc(totalData * 0.7);
startTestIndex = totalData - trainingSize;
endTestIndex = totalData;
trainingData<- as.data.frame(featuresdf[1:trainingSize,]);
testingData<-as.data.frame(featuresdf[startTestIndex:endTestIndex,]);
cv <- createFolds(trainingData[,left], k = 10);
# Control
ctrl <- trainControl(method = "cv",index = cv);
library(caret)
library(xgboost)
library(pROC)
cv <- createFolds(trainingData[,left], k = 10);
ctrl <- trainControl(method = "cv",index = cv);
cv <- createFolds(trainingData[,-"Answer.correct"], k = 10);
trainingData[,"Answer.correct"]
dataf$Answer.correct<- ((dataf$TP==1) + (dataf$TN==1));
featuresdf<- data.frame(dataf$Answer.duration,dataf$Answer.confidence,dataf$Answer.difficulty,stri_length(dataf$Answer.explanation),
dataf$Worker.age,dataf$Worker.yearsOfExperience,dataf$Worker.score,dataf$Worker.profession,
dataf$Code.LOC,dataf$Code.complexity);
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//loadAnswers.R");
dataf <- loadAnswers();
#Compute column to label answers as correct/wrong
dataf$Answer.correct<- ((dataf$TP==1) + (dataf$TN==1));
featuresdf<- data.frame(dataf$Answer.duration,dataf$Answer.confidence,dataf$Answer.difficulty,stri_length(dataf$Answer.explanation),
dataf$Worker.age,dataf$Worker.yearsOfExperience,dataf$Worker.score,dataf$Worker.profession,
dataf$Code.LOC,dataf$Code.complexity,Answer.correct);
colnames(featuresdf) <- c("Answer.duration","Answer.confidence","Answer.difficulty","Answer.explanationSize",
"Worker.age","Worker.yearsOfExperience","Worker.score","Worker.profession",
"Code.LOC","Code.complexity","Answer.correct");
#Scramble the dataset before extracting the training set.
set.seed(8850);
g<- runif((nrow(featuresdf))); #generates a random distribution
featuresdf <- featuresdf[order(g),];
totalData = length(featuresdf$Question.ID);
trainingSize = trunc(totalData * 0.7);
startTestIndex = totalData - trainingSize;
endTestIndex = totalData;
trainingData<- as.data.frame(featuresdf[1:trainingSize,]);
testingData<-as.data.frame(featuresdf[startTestIndex:endTestIndex,]);
cv <- createFolds(trainingData[,-"Answer.correct"], k = 10);
featuresdf<- data.frame(dataf$Answer.duration,dataf$Answer.confidence,dataf$Answer.difficulty,stri_length(dataf$Answer.explanation),
dataf$Worker.age,dataf$Worker.yearsOfExperience,dataf$Worker.score,dataf$Worker.profession,
dataf$Code.LOC,dataf$Code.complexity,Answer.correct);
colnames(featuresdf) <- c("Answer.duration","Answer.confidence","Answer.difficulty","Answer.explanationSize",
"Worker.age","Worker.yearsOfExperience","Worker.score","Worker.profession",
"Code.LOC","Code.complexity","Answer.correct");
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//loadAnswers.R");
dataf <- loadAnswers();
dataf$Answer.correct<- ((dataf$TP==1) + (dataf$TN==1));
featuresdf<- data.frame(dataf$Answer.duration,dataf$Answer.confidence,dataf$Answer.difficulty,stri_length(dataf$Answer.explanation),
dataf$Worker.age,dataf$Worker.yearsOfExperience,dataf$Worker.score,dataf$Worker.profession,
dataf$Code.LOC,dataf$Code.complexity,Answer.correct);
featuresdf<- data.frame(dataf$Answer.duration,dataf$Answer.confidence,dataf$Answer.difficulty,stri_length(dataf$Answer.explanation),
dataf$Worker.age,dataf$Worker.yearsOfExperience,dataf$Worker.score,dataf$Worker.profession,
dataf$Code.LOC,dataf$Code.complexity,data$Answer.correct);
featuresdf<- data.frame(dataf$Answer.duration,dataf$Answer.confidence,dataf$Answer.difficulty,stri_length(dataf$Answer.explanation),
dataf$Worker.age,dataf$Worker.yearsOfExperience,dataf$Worker.score,dataf$Worker.profession,
dataf$Code.LOC,dataf$Code.complexity,data$Answer.correct);
featuresdf<- data.frame(dataf$Answer.duration,dataf$Answer.confidence,dataf$Answer.difficulty,stri_length(dataf$Answer.explanation),
dataf$Worker.age,dataf$Worker.yearsOfExperience,dataf$Worker.score,dataf$Worker.profession,
dataf$Code.LOC,dataf$Code.complexity,dataf$Answer.correct);
colnames(featuresdf) <- c("Answer.duration","Answer.confidence","Answer.difficulty","Answer.explanationSize",
"Worker.age","Worker.yearsOfExperience","Worker.score","Worker.profession",
"Code.LOC","Code.complexity","Answer.correct");
set.seed(8850);
g<- runif((nrow(featuresdf))); #generates a random distribution
featuresdf <- featuresdf[order(g),];
#################################################
#Select train and test data
totalData = length(featuresdf$Question.ID);
trainingSize = trunc(totalData * 0.7);
startTestIndex = totalData - trainingSize;
endTestIndex = totalData;
trainingData<- as.data.frame(featuresdf[1:trainingSize,]);
testingData<-as.data.frame(featuresdf[startTestIndex:endTestIndex,]);
cv <- createFolds(trainingData[,-"Answer.correct"], k = 10);
# Control
ctrl <- trainControl(method = "cv",index = cv);
trainingData$Answer.correct
totalData = length(featuresdf);
totalData
totalData = dim(featuresdf);
totalData
totalData = dim(featuresdf)[2];
totalData = dim(featuresdf)[1];
trainingSize = trunc(totalData * 0.7);
startTestIndex = totalData - trainingSize;
endTestIndex = totalData;
trainingData<- as.data.frame(featuresdf[1:trainingSize,]);
testingData<-as.data.frame(featuresdf[startTestIndex:endTestIndex,]);
cv <- createFolds(trainingData[,-"Answer.correct"], k = 10);
trainingData$Answer.correct
trainingData[,Answer.correct]
trainingData[,"Answer.correct"]
trainingData[,-"Answer.correct"]
trainingData[,11]
trainingData[,1:10]
head(trainingData[,-'Answer.correct'])
trainingData[,1:10]
cv <- createFolds(trainingData[,1:10], k = 10);
ctrl <- trainControl(method = "cv",index = cv);
xgb.train.data = xgb.DMatrix(data.matrix(trainingData[,1:10]), label = trainingData[,11], missing = NA)
library(data.table)
library(rpart)
library(rpart.plot)
xgb.train.data = xgb.DMatrix(data.matrix(trainingData[,1:10]), label = trainingData[,11], missing = NA)
?xgb
DMatrix
dMatrix
xgb.train.data = matrix(data.matrix(trainingData[,1:10]), label = trainingData[,11], missing = NA)
