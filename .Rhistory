library(ggplot2);
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//loadAnswers.R");
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//multiplot.R");
dataf =loadAnswers();
##function to count the numer of workers with profession X for each question
countItem<- function(dataf, yearsOfExperience){
subset_df <-subset(dataf,select= c(Worker.yearsOfExperience));
subset_df <- data.frame(subset_df);
itemCount<- rowSums(subset_df==yearsOfExperience);
subset_df["itemCount"] <- itemCount;
subset_df["Question.ID"] <- dataf$Question.ID;
subset_df <-subset(subset_df,select= c(Question.ID,itemCount));
question_by <- group_by(subset_df,Question.ID);
summaryTable <- summarize(question_by,sum(itemCount));
colnames(summaryTable)<-c("QuestoinID","itemCount");
return(summaryTable);
}
fontSize<-12;
yearsOfExperience<-"Professional_Developer";
dt<-countItem(dataf,profession);
fontSize<-12;
yearsOfExperience<-"Professional_Developer";
dt<-countItem(dataf,yearsOfExperience);
title<- paste("Fig.1 - Distribution of ",yearsOfExperience," workers across questions");
p1<- ggplot(dt,aes(x=itemCount))+
geom_histogram(binwidth = 0.2) +
ggtitle(title) +
theme(plot.title = element_text(size = fontSize))+
labs(y="question count", x=paste(yearsOfExperience," workers per question"));
yearsOfExperience<-"Graduate_Student";
dt<-countItem(dataf,yearsOfExperience);
title<- paste("Fig.2 - Distribution of ",yearsOfExperience," workers across questions");
p2<- ggplot(dt,aes(x=itemCount))+
geom_histogram(binwidth = 0.2) +
ggtitle(title) +
theme(plot.title = element_text(size = fontSize))+
labs(y="question count", x=paste(yearsOfExperience," workers per question"));
yearsOfExperience<-"Hobbyist";
dt<-countItem(dataf,yearsOfExperience);
title<- paste("Fig.3 - Distribution of ",yearsOfExperience," workers across questions");
p3<- ggplot(dt,aes(x=itemCount))+
geom_histogram(binwidth = 0.2) +
ggtitle(title) +
theme(plot.title = element_text(size = fontSize))+
labs(y="question count", x=paste(yearsOfExperience," workers per question"));
yearsOfExperience<-"Undergraduate_Student";
dt<-countItem(dataf,yearsOfExperience);
title<- paste("Fig.4 - Distribution of ",yearsOfExperience," workers across questions");
p4<- ggplot(dt,aes(x=itemCount))+
geom_histogram(binwidth = 0.2) +
ggtitle(title) +
theme(plot.title = element_text(size = fontSize))+
labs(y="question count", x=paste(yearsOfExperience," workers per question"));
yearsOfExperience<-"Other";
dt<-countItem(dataf,yearsOfExperience);
title<- paste("Fig.5 - Distribution of ",yearsOfExperience," workers across questions");
p5<- ggplot(dt,aes(x=itemCount))+
geom_histogram(binwidth = 0.2) +
ggtitle(title) +
theme(plot.title = element_text(size = 12))+
labs(y="question count", x=paste(yearsOfExperience," workers per question"));
multiplot(p1,p2,p3,p4,p5,cols=2)
library(dplyr);
library(ggplot2);
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//loadAnswers.R");
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//multiplot.R");
dataf =loadAnswers();
size<-length(dataf$Worker.ID);
listWorkerYoE<- function(dataf){
workerYoE_vector<- new.env();
size<-length(dataf$Worker.ID);
for(i in 2530){
}
return(workerYoE_vector)
}
listWorkerYoE<- function(dataf){
workerYoE_vector<- new.env();
size<-length(dataf$Worker.ID);
for(i in 2530){
workerYoE_vector[dataf$Worker.ID]<-dataf$Worker.yearsOfExperience;
}
return(workerYoE_vector)
}
listWorkerYoE(dataf);
listWorkerYoE<- function(dataf){
workerYoE_vector;#<- new.env();
size<-length(dataf$Worker.ID);
for(i in 2530){
workerYoE_vector[dataf$Worker.ID]<-dataf$Worker.yearsOfExperience;
}
return(workerYoE_vector)
}
listWorkerYoE<- function(dataf){
workerYoE_vector;#<- new.env();
size<-length(dataf$Worker.ID);
for(i in 2530){
workerYoE_vector[dataf$Worker.ID]<-dataf$Worker.yearsOfExperience;
}
return(workerYoE_vector)
}
listWorkerYoE(dataf);
listWorkerYoE<- function(dataf){
workerYoE_vector;#<- new.env();
size<-length(dataf$Worker.ID);
for(i in 2530){
workerYoE_vector[dataf$Worker.ID]<-dataf$Worker.yearsOfExperience;
}
return(workerYoE_vector)
}
listWorkerYoE(dataf);
listWorkerYoE<- function(dataf){
workerYoE_vector<- new.env();
size<-length(dataf$Worker.ID);
for(i in 2530){
workerYoE_vector[dataf$Worker.ID]<-dataf$Worker.yearsOfExperience;
}
return(workerYoE_vector)
listWorkerYoE(dataf);
summary(listWorkerYoE(dataf));
listWorkerYoE<- function(dataf){
workerYoE_vector<- new.env();
size<-length(dataf$Worker.ID);
for(i in 2530){
workerYoE_vector[dataf$Worker.ID]<-dataf$Worker.yearsOfExperience;
}
return(workerYoE_vector);
}
summary(listWorkerYoE(dataf));
listWorkerYoE<- function(dataf){
workerYoE_vector<- new.env();
size<-length(dataf$Worker.ID);
for(i in 2530){
workerYoE_vector[[dataf$Worker.ID]]<-dataf$Worker.yearsOfExperience;
}
return(workerYoE_vector);
}
summary(listWorkerYoE(dataf));
listWorkerYoE<- function(dataf){
workerYoE_vector<- new.env();
size<-length(dataf$Worker.ID);
for(i in 1:2529){
workerYoE_vector[dataf$Worker.ID]<-dataf$Worker.yearsOfExperience[i];
}
return(workerYoE_vector);
}
summary(listWorkerYoE(dataf));
dataf$Worker.yearsOfExperience[1]
workerYoE_vector[1]
workerYoE_vector<- new.env();
workerYoE_vector[1]
workerYoE_vector[[1]]
workerYoE_vector<-new.env();
workerYoE_vector[as.character[dataf$Worker.ID]]<-dataf$Worker.yearsOfExperience[1];
workerYoE_vector[as.character[dataf$Worker.ID[1]]]<-dataf$Worker.yearsOfExperience[1];
workerYoE_vector[dataf$Worker.ID[1]]<-dataf$Worker.yearsOfExperience[1];
workerYoE_vector<-{};
workerYoE_vector[dataf$Worker.ID[1]]<-dataf$Worker.yearsOfExperience[1];
workerYoE_vector[dataf$Worker.ID[2]]<-dataf$Worker.yearsOfExperience[2];
workerYoE_vector[dataf$Worker.ID[3]]<-dataf$Worker.yearsOfExperience[3];
listWorkerYoE<- function(dataf){
workerYoE_vector<-{};
size<-length(dataf$Worker.ID);
for(i in 1:2529){
workerYoE_vector[as.character[dataf$Worker.ID[i]]]<-dataf$Worker.yearsOfExperience[i];
}
return(workerYoE_vector);
}
summary(listWorkerYoE(dataf));
listWorkerYoE<- function(dataf){
workerYoE_vector<-{};
size<-length(dataf$Worker.ID);
for(i in 1:2529){
workerYoE_vector[dataf$Worker.ID[i]]<-dataf$Worker.yearsOfExperience[i];
}
return(workerYoE_vector);
}
summary(listWorkerYoE(dataf));
workersYoE_vec <- listWorkerYoE(dataf);
head(workersYoE_vec)
length(workersYoE_vec)
colnames(workersYoE_vec)<-c("WorkerID,"YoE");
?pgama
?pgamma
pgamma(0.9,9,1/396)
pgamma(0.1,9,1/396)
pgamma(0.1,9,1/390)
pgamma(0.9,9,1/390)
pgamma(0.95,9,1/390)
pgamma(0.5,9,1/390)
F <- function(x){ pgamma(x, shape, scale) }
shape<-9;
scale<-1/390;
F <- function(x){ pgamma(x, shape, scale); }
shape<-9;
scale<-1/390;
F(4,shape,scale);
F <- function(x,shape,scale){
pgamma(x, shape, scale);
}
shape<-9;
scale<-1/390;
F(4,shape,scale);
pgamma(,9,1/390)
scale
shape<-9;
scale<-1/390;
x<-4;
pgamma(x, shape, scale);
x<-6;
pgamma(x, shape, scale);
x<-4;
p4<- pgamma(x, shape, scale);
x<-6;
p6<- pgamma(x, shape, scale);
gap = 0.025*(p6-p4);
gap
dgamma(0.95, shape, scale);
pgamma(0.95, shape, scale);
pgamma(0.05, shape, scale);
shape<-9;
scale<-390;
pgamma(0.05, shape, scale);
shape<-9;
scale<-390;
pgamma(0.95, shape, scale);
shape<-9;
scale<-390;
1-pgamma(0.95, shape, scale);
shape<-9;
scale<-390;
1-pgamma(0.55, shape, scale);
shape<-9;
scale<-390;
1-pgamma(0.05, shape, scale);
shape<-9;
scale<-390;
1-pgamma(0.95, shape, scale);
shape<-9;
scale<-390;
1-dgamma(0.95, shape, scale);
shape<-9;
rate<-390;
scale<-1/rate;
1-dgamma(0.95, shape, rate,scale);
shape<-9;
rate<-390;
scale<-1/rate;
1-dgamma(0.95, shape, rate);#scale);
dgamma(0.95, shape, rate);#scale);
dgamma(0.95, shape, rate,lower.tail=FALSE);#scale);
dgamma(0.95, shape, rate,lower.tail=TRUE);#scale);
pgamma(0.95, shape, rate,lower.tail=TRUE);#scale);
library(distr)
A <- Exp(rate)
B <- Gammad(shape, scale)
conv <- 0.5*(A+B)
plot(conv)
plot(conv, to.draw.arg=1)
library(distr)
install(distr)
install.packages("distr")
library(distr)
A <- Exp(rate)
B <- Gammad(shape, scale)
conv <- 0.5*(A+B)
plot(conv)
plot(conv, to.draw.arg=1)
density <-pgamma(0.95, shape, rate,lower.tail=TRUE);#scale);
value = 0.025*density;
0.025*density;
round(0.025*density,2);
qgamma(0.975,shape,rate);
plot(Gammad(shape,scale))
?Gammad
y<-c(1:120)
p<-dgamma(y,shape,rate)
plot(y,p)
p<-dgamma(y,shape,scale)
plot(y,p)
plot(p,y)
plot(y,p)
plot(y,1/p)
dbinom(10,20,0.5)
dbinom(5,20,0.5)
dbinom(5,20,0.2)
?dbinom
dbinom(6,20,0.33)
dbinom(1,20,0.33)
dbinom(20,20,0.33)
dbinom(20,20,0.5)
dbinom(0,20,0.5)
dbinom(1,20,0.5)
dbinom(2,20,0.5)
dbinom(3,20,0.5)
dbinom(4,20,0.5)
dbinom(5,20,0.5)
dbinom(6,20,0.5)
dbinom(7,20,0.5)
dbinom(8,20,0.5)
dbinom(9,20,0.5)
dbinom(10,20,0.5)
dbinom(11,20,0.5)
dbinom(3,3,0.5)
dbinom(1,3,0.5)
dbinom(2,3,0.5)
dbinom(0,3,0.5)
Do bug-covering questions receive more answers from professional developers than other questions?
#Are these differences statistically significant?
library(dplyr);
#```{r Setup, echo=FALSE}
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//loadAnswers.R");
#Bug covering question ID's
bugCoveringID<- c(1,4,10,14,20,23,30,32,55,56,57,58,59,72,73,77,84,92,95,97,102,104,115,119,123);
dataf =loadAnswers();
##function to count the numer of workers with profession X for each question
countItem<- function(dataf, profession){
subset_df <-subset(dataf,select= c(Worker.profession)); ##extract only the column Worker.profession)
subset_df <- data.frame(subset_df);
if(length(profession)==0){
itemCount<- rowSums(subset_df==profession); ##Row with ones when profession match, otherwise zero
}
else{
itemCount<- 1; #c(1:dim(subset_df)[1]);
}
subset_df["itemCount"] <- itemCount;
subset_df["Question.ID"] <- dataf$Question.ID;
## subset_df <-subset(subset_df,select= c(Question.ID,itemCount));##select only the rows with
question_by <- group_by(subset_df,Question.ID);
summaryTable <- summarize(question_by,sum(itemCount));
colnames(summaryTable)<-c("QuestionID","itemCount");
return(summaryTable);
}
workers_100<- dataf[(dataf$Worker.score == 5),];
workers_100<-countItem(workers_100,"");
bugCoveringList<- workers_100[(workers_100$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- workers_100[!(workers_100$QuestionID %in% bugCoveringID),];
shapiro.test(bugCoveringList$itemCount); #Not Normal W = 0.88385, p-value = 0.008305
shapiro.test(not_bugCoveringList$itemCount); #Not normal W = 0.95902, p-value = 0.002696
mean(bugCoveringList$itemCount)
mean(not_bugCoveringList$itemCount)
wilcox.test(bugCoveringList$itemCount,not_bugCoveringList$itemCount, alternative= "two.sided", paired=FALSE, conf.int = TRUE);
workers_100_80<- dataf[(dataf$Worker.score %in% c(5,4)),];
workers_100_80<-countItem(workers_100_80,"");
bugCoveringList<- workers_100_80[(workers_100_80$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- workers_100_80[!(workers_100_80$QuestionID %in% bugCoveringID),];
shapiro.test(bugCoveringList$itemCount); #Not Normal W = 0.90188, p-value = 0.02016
shapiro.test(not_bugCoveringList$itemCount); #Not normal W = 0.96726, p-value = 0.01121
mean(bugCoveringList$itemCount)
mean(not_bugCoveringList$itemCount)
wilcox.test(bugCoveringList$itemCount,not_bugCoveringList$itemCount, alternative= "two.sided", paired=FALSE, conf.int = TRUE);
vec1 < c(1:10)
vec1 <- c(1:10)
vec1
df1 <- vec1
df1 <- dataframe(vec1)
vec2<- c(1:10)
vec3<-rbind(vec1,vec2)
vec3
data()
library(dplyr);
#```{r Setup, echo=FALSE}
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//loadAnswers.R");
#Bug covering question ID's
bugCoveringID<- c(1,4,10,14,20,23,30,32,55,56,57,58,59,72,73,77,84,92,95,97,102,104,115,119,123);
dataf =loadAnswers();
dataf
head(dataf)
removeStudent_60<- dataf[!((dataf$Worker.profession %in% c("Graduate_Student","Undergraduate_Student")) & dataf$Worker.score %in% c(3)),];
head(removeStudent_60)
removeStudent_60$Worker.profession
head(removeStudent_60)
removeStudent_60[17:18]
removeStudent_60[:18]=3
removeStudent_60[18]=3
removeStudent_60<- dataf[!((dataf$Worker.profession %in% c("Graduate_Student","Undergraduate_Student")) & dataf$Worker.score %in% c(3)),];
test <- removeStudent_60[!((dataf$Worker.profession %in% c("Graduate_Student","Undergraduate_Student")) & dataf$Worker.score %in% c(3)),];
test
count(test)
count(removeStudent_60)
removedStudent_60<- dataf[!((dataf$Worker.profession %in% c("Graduate_Student","Undergraduate_Student")) & dataf$Worker.score %in% c(3)),];
bugCoveringList<- removedStudent_60[(removedStudent_60$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- removedStudent_60[!(removedStudent_60$QuestionID %in% bugCoveringID),];
shapiro.test(bugCoveringList$itemCount); #Normal W = 0.95015, p-value = 0.2527
View(not_bugCoveringList)
View(bugCoveringList)
shapiro.test(bugCoveringList$itemCount); #Normal W = 0.95015, p-value = 0.2527
library(dplyr);
#```{r Setup, echo=FALSE}
source("C://Users//chris//OneDrive//Documentos//GitHub//photinus-analytics//loadAnswers.R");
#Bug covering question ID's
bugCoveringID<- c(1,4,10,14,20,23,30,32,55,56,57,58,59,72,73,77,84,92,95,97,102,104,115,119,123);
dataf =loadAnswers();
removedStudent_60<- dataf[!((dataf$Worker.profession %in% c("Graduate_Student","Undergraduate_Student")) & dataf$Worker.score %in% c(3)),];
View(removeStudent_60)
removedStudent_60$QuestionID
removedStudent_60<-countItem(removedStudent_60,"");
bugCoveringList<- removedStudent_60[(removedStudent_60$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- removedStudent_60[!(removedStudent_60$QuestionID %in% bugCoveringID),];
View(dt)
View(bugCoveringList)
removedStudent_60<- dataf[!((dataf$Worker.profession %in% c("Graduate_Student","Undergraduate_Student")) & dataf$Worker.score %in% c(3)),];
#Counts the number of occurrences of each questions in the dataset.
removedStudent_60<-countItem(removedStudent_60,"");
bugCoveringList<- removedStudent_60[(removedStudent_60$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- removedStudent_60[!(removedStudent_60$QuestionID %in% bugCoveringID),];
shapiro.test(bugCoveringList$itemCount); #Normal W = 0.95015, p-value = 0.2527
shapiro.test(not_bugCoveringList$itemCount); #Not normal W = 0.96348, p-value = 0.005757
mean(bugCoveringList$itemCount)
mean(not_bugCoveringList$itemCount)
wilcox.test(bugCoveringList$itemCount,not_bugCoveringList$itemCount, alternative= "two.sided", paired=FALSE, conf.int = TRUE);
non_students<- dataf[!(dataf$Worker.profession %in% c("Graduate_Student","Undergraduate_Student")),]
non_student_100_80<- non_students[(dataf$Worker.score %in% c(4,5)),];
non_student_100_80[17,18]
non_students<- dataf[!(dataf$Worker.profession %in% c("Graduate_Student","Undergraduate_Student")),]
non_student_100_80<- non_students[(non_students$Worker.score %in% c(4,5)),];
non_student_100_80[17,18]
non_student_100_80
non_student_100_80[17:18]
non_student_100_80<-countItem(non_student_100_80,"");
bugCoveringList<- non_student_100_80[(non_student_100_80$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- non_student_100_80[!(non_student_100_80$QuestionID %in% bugCoveringID),];
shapiro.test(bugCoveringList$itemCount); #Normal W = 0.93489, p-value = 0.1128
shapiro.test(not_bugCoveringList$itemCount); #Not normal W = 0.96072, p-value = 0.003591
mean(bugCoveringList$itemCount) #11.28
mean(not_bugCoveringList$itemCount) #10.49
wilcox.test(bugCoveringList$itemCount,not_bugCoveringList$itemCount, alternative= "two.sided", paired=FALSE, conf.int = TRUE);
filteredSet<- dataf[!(dataf$Answer.difficulty %in% c(5)),]
filteredSet<-countItem(filteredSet,"");
bugCoveringList<- filteredSet[(filteredSet$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- filteredSet[!(filteredSet$QuestionID %in% bugCoveringID),];
shapiro.test(bugCoveringList$itemCount); #Normal W = 0.93489, p-value = 0.1128
shapiro.test(not_bugCoveringList$itemCount); #Not normal W = 0.96072, p-value = 0.003591
mean(bugCoveringList$itemCount) #11.28
shapiro.test(not_bugCoveringList$itemCount); #Not normal W = 0.96072, p-value = 0.003591
mean(not_bugCoveringList$itemCount) #10.49
wilcox.test(bugCoveringList$itemCount,not_bugCoveringList$itemCount, alternative= "two.sided", paired=FALSE, conf.int = TRUE);
filteredSet<- dataf[!((dataf$Answer.difficulty %in% c(5)) & (dataf$Worker.score %in% c(4,3))),]
filteredSet<-countItem(filteredSet,"");
bugCoveringList<- filteredSet[(filteredSet$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- filteredSet[!(filteredSet$QuestionID %in% bugCoveringID),];
shapiro.test(bugCoveringList$itemCount); #Not normal W = 0.79116, p-value = 0.0001625
shapiro.test(not_bugCoveringList$itemCount); #Not normal W = 0.95419, p-value = 0.001221
mean(bugCoveringList$itemCount) #16.4
mean(not_bugCoveringList$itemCount) #17.02885
wilcox.test(bugCoveringList$itemCount,not_bugCoveringList$itemCount, alternative= "two.sided", paired=FALSE, conf.int = TRUE);
filteredSet<- filteredSet[!((filteredSet$Answer.difficulty %in% c(5,4)) & (filteredSet$Worker.score %in% c(3))),]
filteredSet<- dataf[!((dataf$Answer.difficulty %in% c(5)) & (dataf$Worker.score %in% c(4))),]
filteredSet<- filteredSet[!((filteredSet$Answer.difficulty %in% c(5,4)) & (filteredSet$Worker.score %in% c(3))),]
filteredSet<-countItem(filteredSet,"");
bugCoveringList<- filteredSet[(filteredSet$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- filteredSet[!(filteredSet$QuestionID %in% bugCoveringID),];
shapiro.test(bugCoveringList$itemCount); #Not normal W = 0.77357, p-value = 8.501e-05
shapiro.test(not_bugCoveringList$itemCount); #Not normal W = 0.91952, p-value = 9.219e-06
mean(bugCoveringList$itemCount) #17.92
mean(not_bugCoveringList$itemCount) #18.06731
wilcox.test(bugCoveringList$itemCount,not_bugCoveringList$itemCount, alternative= "two.sided", paired=FALSE, conf.int = TRUE);
filteredSet<- dataf[!((dataf$Answer.difficulty %in% c(5,4)) & (dataf$Worker.score %in% c(4,3))),]
filteredSet<-countItem(filteredSet,"");
bugCoveringList<- filteredSet[(filteredSet$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- filteredSet[!(filteredSet$QuestionID %in% bugCoveringID),];
shapiro.test(bugCoveringList$itemCount); #Not normal W = 0.92785, p-value = 0.07752
shapiro.test(not_bugCoveringList$itemCount); #Not normal W = 0.95128, p-value = 0.0007699
mean(bugCoveringList$itemCount) #16.76
mean(not_bugCoveringList$itemCount) #16.78846
wilcox.test(bugCoveringList$itemCount,not_bugCoveringList$itemCount, alternative= "two.sided", paired=FALSE, conf.int = TRUE);
filteredSet<- dataf[!((dataf$Answer.difficulty %in% c(5,4,3)) & (dataf$Worker.profession %in% c("Professional_Programmer", "Hobbyist", "Other"))),]
filteredSet<- dataf[!((dataf$Worker.profession %in% c("Graduate_Student", "Undergraduate_Student"))),]
filteredSet<-countItem(filteredSet,"");
bugCoveringList<- filteredSet[(filteredSet$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- filteredSet[!(filteredSet$QuestionID %in% bugCoveringID),];
shapiro.test(bugCoveringList$itemCount); #Not normal W = 0.94615, p-value = 0.205
shapiro.test(not_bugCoveringList$itemCount); #Not normal W = 0.97251, p-value = 0.02903
filteredSet<- dataf[!((dataf$Answer.difficulty %in% c(5,4,3)) & (dataf$Worker.profession %in% c("Professional_Programmer", "Hobbyist", "Other"))),]
filteredSet<- filteredSet[!((filteredSet$Worker.profession %in% c("Graduate_Student", "Undergraduate_Student"))),]
filteredSet<-countItem(filteredSet,"");
bugCoveringList<- filteredSet[(filteredSet$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- filteredSet[!(filteredSet$QuestionID %in% bugCoveringID),];
shapiro.test(bugCoveringList$itemCount); #normal W = 0.91388, p-value = 0.03723
shapiro.test(not_bugCoveringList$itemCount); # normal W = 0.94878, p-value = 0.0005217
mean(bugCoveringList$itemCount) #15.48
mean(not_bugCoveringList$itemCount) #15.47115
t.test(bugCoveringList$itemCount,not_bugCoveringList$itemCount, alternative= "two.sided", paired=FALSE, conf.int = TRUE);
filteredSet<- dataf[!((dataf$Answer.difficulty %in% c(5)) & (dataf$Worker.profession %in% c("Graduate_Student"))),]
filteredSet<- filteredSet[!((filteredSet$Answer.difficulty %in% c(5,4)) & (filteredSet$Worker.profession %in% c("Undergraduate_Student"))),]
filteredSet<-countItem(filteredSet,"");
bugCoveringList<- filteredSet[(filteredSet$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- filteredSet[!(filteredSet$QuestionID %in% bugCoveringID),];
shapiro.test(bugCoveringList$itemCount); #normal W = 0.91388, p-value = 0.03723
shapiro.test(not_bugCoveringList$itemCount); # normal W = 0.94878, p-value = 0.0005217
mean(bugCoveringList$itemCount) #15.48
mean(not_bugCoveringList$itemCount) #15.47115
wilcox.test(bugCoveringList$itemCount,not_bugCoveringList$itemCount, alternative= "two.sided", paired=FALSE, conf.int = TRUE);
filteredSet<- dataf[!((dataf$Answer.difficulty %in% c(5,4,3)) & (dataf$Worker.profession %in% c("Graduate_Student","Undergraduate_Student"))),]
filteredSet<-countItem(filteredSet,"");
bugCoveringList<- filteredSet[(filteredSet$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- filteredSet[!(filteredSet$QuestionID %in% bugCoveringID),];
shapiro.test(bugCoveringList$itemCount); #NOT normal W = 0.78078, p-value = 0.0001105
shapiro.test(not_bugCoveringList$itemCount); #NOT normal W = 0.89938, p-value = 8.781e-07
mean(bugCoveringList$itemCount) #17.92
mean(not_bugCoveringList$itemCount) #18.13462
wilcox.test(bugCoveringList$itemCount,not_bugCoveringList$itemCount, alternative= "two.sided", paired=FALSE, conf.int = TRUE);
filteredSet<- dataf[!((dataf$Answer.difficulty %in% c(5,4)) & (dataf$Worker.profession %in% c("Graduate_Student","Undergraduate_Student"))),]
filteredSet<-countItem(filteredSet,"");
bugCoveringList<- filteredSet[(filteredSet$QuestionID %in% bugCoveringID),];
not_bugCoveringList<- filteredSet[!(filteredSet$QuestionID %in% bugCoveringID),];
shapiro.test(bugCoveringList$itemCount); #NOT normal W = 0.96139, p-value = 0.4428
shapiro.test(not_bugCoveringList$itemCount); #NOT normal W = 0.92658, p-value = 2.262e-05
shapiro.test(bugCoveringList$itemCount); #NOT normal W = 0.96139, p-value = 0.4428
shapiro.test(not_bugCoveringList$itemCount); #NOT normal W = 0.92658, p-value = 2.262e-05
mean(bugCoveringList$itemCount) #15.36
mean(not_bugCoveringList$itemCount) #15.75
wilcox.test(bugCoveringList$itemCount,not_bugCoveringList$itemCount, alternative= "two.sided", paired=FALSE, conf.int = TRUE);
